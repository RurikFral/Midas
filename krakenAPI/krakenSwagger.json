{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://api.kraken.com/0",
      "description": "Production Server"
    }
  ],
  "info": {
    "title": "REST API",
    "contact": {
      "url": "https://support.kraken.com/hc/en-us/requests/new?ticket_form_id=360000104043"
    },
    "version": "1.0.0",
    "x-logo": {
      "url": "kraken_logo_w.png",
      "altText": "Kraken Logo"
    },
    "description": "# General Usage\n\nThis document details use of Kraken's REST API for our spot exchange. The [Websockets API](https://docs.kraken.com/websockets) and [Kraken Futures API](https://support.kraken.com/hc/en-us/sections/360012894412-Futures-API) are documented separately. Our REST API is organised into publicly accessible endpoints (market data, exchange status, etc.), and private authenticated endpoints (trading, funding, user data) which require requests to be signed.\n\n## Support \n\nFurther information and FAQs may be found on the [API section](https://support.kraken.com/hc/en-us/categories/360000080686-API) of our support pages. If you have trouble making any standard requests that our system permits, please [send us](https://support.kraken.com/hc/en-us/requests/new?ticket_form_id=360000104043) a full copy of the request(s) that you're attempting, including your IP address and all headers, so that we may investigate further.\n\n## Requests, Responses and Errors\n\n### Requests\nRequest payloads are [form-encoded](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) (`Content-Type: application/x-www-form-urlencoded`), and all requests must specify a `User-Agent` in their headers.\n\n### Responses\nResponses are JSON encoded and contain one or two top-level keys (`result` and `error` for successful requests or those with warnings, or only `error` for failed or rejected requests)\n\n#### Example Successful Response\n```javascript\n{\n  \"error\": [],\n  \"result\": {\n    \"status\": \"online\",\n    \"timestamp\": \"2021-03-22T17:18:03Z\"\n  }\n}\n```\n> GET https://api.kraken.com/0/public/SystemStatus\n\n#### Example Rejection\n```javascript\n{\n  \"error\": [\n    \"EGeneral:Invalid arguments:ordertype\"\n  ]\n}\n```\n\n### Error Details\n\nHTTP status codes are generally not used by our API to convey information about the state of requests -- any errors or warnings are denoted in the `error` field of the response as described above. Status codes __other__ than 200 indicate that there was an issue with the request reaching our servers.\n\n`error` messages follow the general format `<severity><category>`:`<error msg>`[`:add'l text`]\n\n* `severity` can be either `E` for error or `W` for warning\n* `category` can be one of `General`, `Auth`, `API`, `Query`, `Order`, `Trade`, `Funding`, or `Service`\n* `error msg` can be any text string that describes the reason for the error\n\n#### Some Common Examples\n\n| Error | Additional Info |\n| -- | -- |\n| EGeneral:Invalid arguments | The request payload is malformed, incorrect or ambiguous. |\n| EService:Unavailable | The matching engine or API is offline |\n| EService:Market in cancel_only mode | Request can't be made at this time. (See `SystemStatus` endpoint.) |\n| EService:Market in post_only mode | Request can't be made at this time. (See `SystemStatus` endpoint.) |    \n| EAPI:Invalid key | An invalid `API-Key` header was supplied (see Authentication section) |\n| EAPI:Invalid signature | An invalid `API-Sign` header was supplied (see Authentication section) |\n| EAPI:Invalid nonce | An invalid `nonce` was supplied (see Authentication section) |\n| EGeneral:Permission denied | API key doesn't have permission to make this request. |    \n| EOrder:Cannot open position | User/tier is ineligible for margin trading |\n| EOrder:Margin allowance exceeded | User has exceeded their margin allowance |\n| EOrder:Margin level too low | Client has insufficient equity or collateral |\n| EOrder:Insufficient margin | Exchange does not have available funds for this margin trade |\n| EOrder:Insufficient funds | Client does not have the necessary funds |\n| EOrder:Order minimum not met | Order size does not meet `ordermin`. (See `AssetPairs` endpoint.)  |\n| EOrder:Orders limit exceeded | (See Rate Limits section) |\n| EOrder:Rate limit exceeded | (See Rate Limits section) |\n| EOrder:Positions limit exceeded |  |\n| EOrder:Unknown position |  |\n\nAdditional information can be found on our [support center](https://support.kraken.com/hc/en-us/articles/360001491786-API-error-messages).\n\n\n\n# Authentication\n\nAuthenticated requests must include both `API-Key` and `API-Sign` HTTP headers, and `nonce` in the request payload. `otp` is also required in the payload if two-factor authentication (2FA) is enabled.\n\n\n## Nonce and 2FA\n\n### `nonce`\n\nNonce must be an always increasing, unsigned 64-bit integer, for each request that is made with a particular API key. While a simple counter would provide a valid nonce, a more usual method of generating a valid nonce is to use e.g. a UNIX timestamp in milliseconds.\n\n> **Note:** There is no way to reset the nonce for an API key to a lower value, so be sure to use a nonce generation method that won't produce numbers less than the previous nonce. Too many requests with invalid nonces (EAPI:Invalid nonce) can result in temporary bans. Problems can arise from requests arriving out of order due to API keys being shared across processes, or from system clock drift/recalibration. An optional \"nonce window\" can be configured to specify a tolerance between nonce values. Additional info can be found in our [support pages](https://support.kraken.com/hc/en-us/articles/360000906023-What-is-a-nonce-).\n\n### `otp`\n\nIf two-factor authentication (2FA) is enabled for the API key and action in question, the one time password must be specified in the payload's `otp` value.\n\n\n## Headers and Signature\n\n<SecurityDefinitions />\n\n# Rate Limits\n\nWe have various safeguards in place to protect against system abuse, order book manipulation, DDoS attacks, etc. For REST API requests, these are broadly organised into rate limits specific to the REST API, and rate limits which apply to any trading requests.\n\n> __Note:__ For clients with performance sensitive applications, we strongly recommend the use of our Websockets API for minimising request latency and receiving real-time information, reducing or eliminating the need to frequently poll REST endpoints.\n\n## REST API Rate Limits\n\n### Limits\n\nEvery REST API user has a \"call counter\" which starts at `0`. Ledger/trade history calls increase the counter by `2`. All other API calls increase this counter by `1` (except AddOrder, CancelOrder which operate on a different limiter detailed further below).\n\n| Tier         | Max API Counter | API Counter Decay |\n| ------------ | --------------- | ----------------- |\n| Starter      | 15              | -0.33/sec         |\n| Intermediate | 20              | -0.5/sec          |\n| Pro          | 20              | -1/sec            |\n\nThe user's counter is reduced every couple of seconds depending on their verification tier. Each API key's counter is separate, and if the counter exceeds the maximum value, subsequent calls using that API key would be rate limited. If the rate limits are reached, additional calls will be restricted for a few seconds (or possibly longer if calls continue to be made while the rate limits are active).\n\n### Errors\n\n* \"EAPI:Rate limit exceeded\" if the REST API counter exceeds the user's maximum.\n* \"EService: Throttled: [UNIX timestamp]\" if there are too many concurrent requests. Try again after [timestamp].\n\nAdditional information can be found on our [support center](https://support.kraken.com/hc/en-us/articles/206548367-What-are-the-API-rate-limits-).\n\n## Matching Engine Rate Limits\n\n### Limits\n\nSeparate limits apply to the number of orders clients may have open in each pair at a time, and the speed with which they may add and cancel orders in each pair. These limits vary by the account verification tier: \n\n| Tier      | Max Num Orders | Max Ratecount | Ratecount Decay |\n| ----------- | ----------- | ----------- | ----------- |\n| Starter      | 60       | 60 | -1/sec |\n| Intermediate   | 80 | 125 | -2.34/sec |\n| Pro     | 225 | 180 | -3.75/sec |\n\n### Penalties\n\nThe speed is controlled by a ratecounter for each (client, pair) which starts at zero, is incremented when penalties are applied, and decremented according to the decay rates above. A penalty is added to the ratecounter for each new order placed (`AddOrder`) or cancelled (`CancelOrder`, `CancelAll`, `CancelAllOrdersAfter`) on the pair. The cancellation penalty varies according to the lifetime of the order.\n\n| Action       |    | <5sec  | <10sec | <15sec | <45sec | <90sec | <300s | >300s |\n| ------------ | -- | -- | -- | -- | -- | -- | -- | -- |\n| Add Order    | +1 |    |    |    |    |    |    |    |\n| Cancel Order |    | +8 | +6 | +5 | +4 | +2 | +1 | 0 |\n\n> __Note:__ A client's exact ratecounter values can be monitored via the Websockets [openOrders](https://docs.kraken.com/websockets/#message-openOrders) feed.\n\n### Errors\n\n* \"EOrder:Orders limit exceeded\" if the number of open orders in a given pair is exceeded\n* \"EOrder:Rate limit exceeded\" if the user's max ratecount is exceeded for a given pair\n\nAdditional information can be found on our [support center](https://support.kraken.com/hc/en-us/articles/360045239571).\n\n# Changelog\n\nMost changes affecting our APIs or trading engine behaviour are currently being tracked on our [Websockets](https://docs.kraken.com/websockets/#changelog) changelog, until these documents are combined.\n\n# Example API Clients\n\nIn order to achieve maximum performance, security and flexibility for your particular needs, we strongly encourage the implementation of this API with your own code, and to minimise reliance on third party software.\n\nThat being said, in order to aid with rapid development and prototyping, we're in the process of producing 'official' API clients in Python and Golang that will be actively maintained, coincident with the release of newer versions of both our Websockets and REST APIs. In the meantime, our Client Engagement team has compiled a number of [code snippets, examples and Postman collections](https://support.kraken.com/hc/en-us/sections/360003946512-Example-API-Code) that many find useful. \n\n### Third Party Software\n\nBelow are other third party API client code libraries that may be used when writing your own API client. Please keep in mind that Payward nor the third party authors are responsible for losses due to bugs or improper use of the APIs. Payward has performed an initial review of the safety of the third party code before listing them but cannot vouch for any changes added since then, or for those that may be stale. If you have concerns, please contact support.\n\n| Language      | Link |\n| ----------- | ----------- |\n| C++ | [https://github.com/voidloop/krakenapi](https://github.com/voidloop/krakenapi) |\n| Golang | [https://github.com/Beldur/kraken-go-api-client](https://github.com/Beldur/kraken-go-api-client) |\n| NodeJS | [https://github.com/nothingisdead/npm-kraken-api](https://github.com/nothingisdead/npm-kraken-api) |\n| Python 3 | [https://github.com/veox/python3-krakenex](https://github.com/veox/python3-krakenex)       |\n| Python 2 | [https://github.com/veox/python2-krakenex](https://github.com/veox/python2-krakenex) |\n\nOther \n"
  },
  "paths": {
    "/public/Time": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Server Time",
        "x-summary": "Test123",
        "description": "Get the server's time.",
        "operationId": "getServerTime",
        "security": [],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Success response",
                  "type": "object",
                  "properties": {
                    "result": {
                      "title": "ServerTime",
                      "type": "object",
                      "properties": {
                        "unixtime": {
                          "description": "Unix timestamp",
                          "type": "integer"
                        },
                        "rfc1123": {
                          "description": "RFC 1123 time format",
                          "type": "string"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "unixtime": 1616336594,
                    "rfc1123": "Sun, 21 Mar 21 14:23:14 +0000"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "label": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/Time\""
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/Time')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/public/SystemStatus": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get System Status",
        "description": "Get the current system status or trading mode. \n",
        "operationId": "getSystemStatus",
        "security": [],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "online",
                            "maintenance",
                            "cancel_only",
                            "post_only"
                          ],
                          "description": "Current system status\n\n* `online`  Kraken is operating normally. All order types may be submitted and trades can occur.\n* `maintenance`  The exchange is offline. No new orders or cancellations may be submitted.\n* `cancel_only`  Resting (open) orders can be cancelled but no new orders may be submitted. No trades will occur.\n* `post_only`  Only post-only limit orders can be submitted. Existing orders may still be cancelled. No trades will occur.\n"
                        },
                        "timestamp": {
                          "type": "string",
                          "description": "Current timestamp (RFC3339)"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "status": "online",
                    "timestamp": "2021-03-21T15:33:02Z"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/SystemStatus\""
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/SystemStatus')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/public/Assets": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Asset Info",
        "description": "Get information about the assets that are available for deposit, withdrawal, trading and staking.",
        "operationId": "getAssetInfo",
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "asset",
            "schema": {
              "type": "string"
            },
            "description": "Comma delimited list of assets to get info on (optional.  default = `all`)",
            "example": "XBT,ETH"
          },
          {
            "in": "query",
            "name": "aclass",
            "schema": {
              "type": "string"
            },
            "description": "Asset class.  (optional, default: `currency`)",
            "example": "currency"
          }
        ],
        "responses": {
          "200": {
            "description": "Asset info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": {
                      "XXBT": {
                        "aclass": "currency",
                        "altname": "XBT",
                        "decimals": 10,
                        "display_decimals": 5
                      },
                      "ZEUR": {
                        "aclass": "currency",
                        "altname": "EUR",
                        "decimals": 4,
                        "display_decimals": 2
                      },
                      "ZUSD": {
                        "aclass": "currency",
                        "altname": "USD",
                        "decimals": 4,
                        "display_decimals": 2
                      }
                    }
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "additionalProperties": {
                        "x-additionalPropertiesName": "asset",
                        "title": "AssetInfo",
                        "description": "Asset Info",
                        "type": "object",
                        "properties": {
                          "aclass": {
                            "description": "Asset Class",
                            "type": "string"
                          },
                          "altname": {
                            "description": "Alternate name",
                            "type": "string"
                          },
                          "decimals": {
                            "description": "Scaling decimal places for record keeping",
                            "type": "integer"
                          },
                          "display_decimals": {
                            "description": "Scaling decimal places for output display",
                            "type": "integer"
                          }
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/Assets\"\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/Assets')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/public/AssetPairs": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Tradable Asset Pairs",
        "description": "Get tradable asset pairs",
        "operationId": "getTradableAssetPairs",
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "pair",
            "description": "Asset pairs to get data for",
            "schema": {
              "type": "string"
            },
            "example": "XXBTCZUSD,XETHXXBT"
          },
          {
            "in": "query",
            "name": "info",
            "schema": {
              "type": "string",
              "enum": [
                "info",
                "leverage",
                "fees",
                "margin"
              ],
              "default": "info"
            },
            "description": "Info to retrieve.  (optional)\n\n  * `info` = all info\n  * `leverage` = leverage info\n  * `fees` = fees schedule\n  * `margin` = margin info\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Tradable asset pairs retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "description": "Pair names and their info",
                      "type": "object",
                      "additionalProperties": {
                        "title": "AssetPair",
                        "description": "Trading Asset Pair",
                        "type": "object",
                        "x-additionalPropertiesName": "pair",
                        "properties": {
                          "altname": {
                            "description": "Alternate pair name",
                            "type": "string"
                          },
                          "wsname": {
                            "description": "WebSocket pair name (if available)",
                            "type": "string"
                          },
                          "aclass_base": {
                            "description": "Asset class of base component",
                            "type": "string"
                          },
                          "base": {
                            "description": "Asset ID of base component",
                            "type": "string"
                          },
                          "aclass_quote": {
                            "description": "Asset class of quote component",
                            "type": "string"
                          },
                          "quote": {
                            "description": "Asset ID of quote component",
                            "type": "string"
                          },
                          "lot": {
                            "description": "Volume lot size",
                            "type": "string",
                            "deprecated": true
                          },
                          "pair_decimals": {
                            "description": "Scaling decimal places for pair",
                            "type": "integer"
                          },
                          "lot_decimals": {
                            "description": "Scaling decimal places for volume",
                            "type": "integer"
                          },
                          "lot_multiplier": {
                            "description": "Amount to multiply lot volume by to get currency volume",
                            "type": "integer"
                          },
                          "leverage_buy": {
                            "description": "Array of leverage amounts available when buying",
                            "type": "array",
                            "items": {
                              "type": "integer"
                            }
                          },
                          "leverage_sell": {
                            "description": "Array of leverage amounts available when selling",
                            "type": "array",
                            "items": {
                              "type": "integer"
                            }
                          },
                          "fees": {
                            "description": "Fee schedule array in `[<volume>, <percent fee>]` tuples",
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              }
                            }
                          },
                          "fees_maker": {
                            "description": "Maker fee schedule array in `[<volume>, <percent fee>]`  tuples (if on maker/taker)",
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "oneOf": [
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              }
                            }
                          },
                          "fee_volume_currency": {
                            "description": "Volume discount currency",
                            "type": "string"
                          },
                          "margin_call": {
                            "description": "Margin call level",
                            "type": "integer"
                          },
                          "margin_stop": {
                            "description": "Stop-out/liquidation margin level",
                            "type": "integer"
                          },
                          "ordermin": {
                            "description": "Minimum order size (in terms of base currency)",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "description": "Kraken API error",
                        "type": "string",
                        "example": "EGeneral:Invalid arguments"
                      }
                    }
                  },
                  "example": {
                    "error": [],
                    "result": {
                      "XETHXXBT": {
                        "altname": "ETHXBT",
                        "wsname": "ETH/XBT",
                        "aclass_base": "currency",
                        "base": "XETH",
                        "aclass_quote": "currency",
                        "quote": "XXBT",
                        "lot": "unit",
                        "pair_decimals": 5,
                        "lot_decimals": 8,
                        "lot_multiplier": 1,
                        "leverage_buy": [
                          2,
                          3,
                          4,
                          5
                        ],
                        "leverage_sell": [
                          2,
                          3,
                          4,
                          5
                        ],
                        "fees": [
                          [
                            0,
                            0.26
                          ],
                          [
                            50000,
                            0.24
                          ],
                          [
                            100000,
                            0.22
                          ],
                          [
                            250000,
                            0.2
                          ],
                          [
                            500000,
                            0.18
                          ],
                          [
                            1000000,
                            0.16
                          ],
                          [
                            2500000,
                            0.14
                          ],
                          [
                            5000000,
                            0.12
                          ],
                          [
                            10000000,
                            0.1
                          ]
                        ],
                        "fees_maker": [
                          [
                            0,
                            0.16
                          ],
                          [
                            50000,
                            0.14
                          ],
                          [
                            100000,
                            0.12
                          ],
                          [
                            250000,
                            0.1
                          ],
                          [
                            500000,
                            0.08
                          ],
                          [
                            1000000,
                            0.06
                          ],
                          [
                            2500000,
                            0.04
                          ],
                          [
                            5000000,
                            0.02
                          ],
                          [
                            10000000,
                            0
                          ]
                        ],
                        "fee_volume_currency": "ZUSD",
                        "margin_call": 80,
                        "margin_stop": 40,
                        "ordermin": "0.005"
                      },
                      "XXBTZUSD": {
                        "altname": "XBTUSD",
                        "wsname": "XBT/USD",
                        "aclass_base": "currency",
                        "base": "XXBT",
                        "aclass_quote": "currency",
                        "quote": "ZUSD",
                        "lot": "unit",
                        "pair_decimals": 1,
                        "lot_decimals": 8,
                        "lot_multiplier": 1,
                        "leverage_buy": [
                          2,
                          3,
                          4,
                          5
                        ],
                        "leverage_sell": [
                          2,
                          3,
                          4,
                          5
                        ],
                        "fees": [
                          [
                            0,
                            0.26
                          ],
                          [
                            50000,
                            0.24
                          ],
                          [
                            100000,
                            0.22
                          ],
                          [
                            250000,
                            0.2
                          ],
                          [
                            500000,
                            0.18
                          ],
                          [
                            1000000,
                            0.16
                          ],
                          [
                            2500000,
                            0.14
                          ],
                          [
                            5000000,
                            0.12
                          ],
                          [
                            10000000,
                            0.1
                          ]
                        ],
                        "fees_maker": [
                          [
                            0,
                            0.16
                          ],
                          [
                            50000,
                            0.14
                          ],
                          [
                            100000,
                            0.12
                          ],
                          [
                            250000,
                            0.1
                          ],
                          [
                            500000,
                            0.08
                          ],
                          [
                            1000000,
                            0.06
                          ],
                          [
                            2500000,
                            0.04
                          ],
                          [
                            5000000,
                            0.02
                          ],
                          [
                            10000000,
                            0
                          ]
                        ],
                        "fee_volume_currency": "ZUSD",
                        "margin_call": 80,
                        "margin_stop": 40,
                        "ordermin": "0.0002"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/AssetPairs?pair=XXBTZUSD,XETHXXBT\"\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/AssetPairs?pair=XXBTZUSD,XETHXXBT')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/public/Ticker": {
      "get": {
        "summary": "Get Ticker Information",
        "description": "Note: Today's prices start at midnight UTC",
        "tags": [
          "Market Data"
        ],
        "operationId": "getTickerInformation",
        "security": [],
        "parameters": [
          {
            "$ref": "#/paths/~1public~1OHLC/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Ticker info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": {
                      "XXBTZUSD": {
                        "a": [
                          "52609.60000",
                          "1",
                          "1.000"
                        ],
                        "b": [
                          "52609.50000",
                          "1",
                          "1.000"
                        ],
                        "c": [
                          "52641.10000",
                          "0.00080000"
                        ],
                        "v": [
                          "1920.83610601",
                          "7954.00219674"
                        ],
                        "p": [
                          "52389.94668",
                          "54022.90683"
                        ],
                        "t": [
                          23329,
                          80463
                        ],
                        "l": [
                          "51513.90000",
                          "51513.90000"
                        ],
                        "h": [
                          "53219.90000",
                          "57200.00000"
                        ],
                        "o": "52280.40000"
                      }
                    }
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "additionalProperties": {
                        "x-additionalPropertiesName": "pair",
                        "title": "AssetTickerInfo",
                        "description": "Asset Ticker Info",
                        "type": "object",
                        "properties": {
                          "a": {
                            "description": "Ask `[<price>, <whole lot volume>, <lot volume>]`",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "b": {
                            "description": "Bid `[<price>, <whole lot volume>, <lot volume>]`",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "c": {
                            "description": "Last trade closed `[<price>, <lot volume>]`",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "v": {
                            "description": "Volume `[<today>, <last 24 hours>]`",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "p": {
                            "description": "Volume weighted average price `[<today>, <last 24 hours>]`",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "t": {
                            "description": "Number of trades `[<today>, <last 24 hours>]`",
                            "type": "array",
                            "items": {
                              "type": "integer"
                            }
                          },
                          "l": {
                            "description": "Low `[<today>, <last 24 hours>]`",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "h": {
                            "description": "High `[<today>, <last 24 hours>]`",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "o": {
                            "description": "Today's opening price",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/Ticker?pair=XBTUSD\"\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/Ticker?pair=XBTUSD')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/public/OHLC": {
      "get": {
        "summary": "Get OHLC Data",
        "description": "Note: the last entry in the OHLC array is for the current, not-yet-committed frame and will always be present, regardless of the value of `since`.",
        "tags": [
          "Market Data"
        ],
        "operationId": "getOHLCData",
        "parameters": [
          {
            "in": "query",
            "name": "pair",
            "description": "Asset pair to get data for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "XBTUSD"
          },
          {
            "name": "interval",
            "description": "Time frame interval in minutes",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1,
              "enum": [
                1,
                5,
                15,
                30,
                60,
                240,
                1440,
                10080,
                21600
              ]
            },
            "example": 60
          },
          {
            "name": "since",
            "in": "query",
            "description": "Return committed OHLC data since given ID",
            "schema": {
              "type": "integer"
            },
            "example": 1548111600
          }
        ],
        "responses": {
          "200": {
            "description": "OHLC data retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": {
                      "XXBTZUSD": [
                        [
                          1616662740,
                          "52591.9",
                          "52599.9",
                          "52591.8",
                          "52599.9",
                          "52599.1",
                          "0.11091626",
                          5
                        ],
                        [
                          1616662800,
                          "52600.0",
                          "52674.9",
                          "52599.9",
                          "52665.2",
                          "52643.3",
                          "2.49035996",
                          30
                        ],
                        [
                          1616662860,
                          "52677.7",
                          "52686.4",
                          "52602.1",
                          "52609.5",
                          "52634.5",
                          "1.25810675",
                          20
                        ],
                        [
                          1616662920,
                          "52603.9",
                          "52627.5",
                          "52601.2",
                          "52616.4",
                          "52614.0",
                          "3.42391799",
                          23
                        ],
                        [
                          1616662980,
                          "52601.2",
                          "52601.2",
                          "52599.9",
                          "52599.9",
                          "52599.9",
                          "0.43748934",
                          7
                        ]
                      ],
                      "last": 1616662920
                    }
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "additionalProperties": {
                        "x-additionalPropertiesName": "pair",
                        "title": "TickData",
                        "description": "Array of tick data arrays\n`[int <time>, string <open>, string <high>, string <low>, string <close>, string <vwap>, string <volume>, int <count>]`\n",
                        "type": "array",
                        "items": {
                          "type": "array",
                          "items": {
                            "minItems": 8,
                            "maxItems": 8,
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "integer"
                              }
                            ],
                            "example": [
                              1548115200,
                              "3533.4",
                              "3543.7",
                              "3530.7",
                              "3539.4",
                              "3539.8",
                              "83.09287787",
                              232
                            ]
                          }
                        }
                      },
                      "properties": {
                        "last": {
                          "type": "integer",
                          "description": "ID to be used as since when polling for new, committed OHLC data"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/OHLC?pair=XBTUSD\"\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/OHLC?pair=XBTUSD')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/public/Depth": {
      "get": {
        "summary": "Get Order Book",
        "tags": [
          "Market Data"
        ],
        "operationId": "getOrderBook",
        "security": [],
        "parameters": [
          {
            "$ref": "#/paths/~1public~1OHLC/get/parameters/0"
          },
          {
            "name": "count",
            "description": "maximum number of asks/bids",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 500,
              "default": 100
            },
            "example": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Order book entries retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": {
                      "XXBTZUSD": {
                        "asks": [
                          [
                            "52523.00000",
                            "1.199",
                            1616663113
                          ],
                          [
                            "52536.00000",
                            "0.300",
                            1616663112
                          ]
                        ],
                        "bids": [
                          [
                            "52522.90000",
                            "0.753",
                            1616663112
                          ],
                          [
                            "52522.80000",
                            "0.006",
                            1616663109
                          ]
                        ]
                      }
                    }
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "additionalProperties": {
                        "x-additionalPropertiesName": "pair",
                        "title": "OrderBook",
                        "description": "Asset Pair Order Book Entries",
                        "type": "object",
                        "properties": {
                          "asks": {
                            "description": "Ask side array of entries `[<price>, <volume>, <timestamp>]`",
                            "type": "array",
                            "items": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "integer"
                                }
                              ],
                              "example": [
                                "3539.90000",
                                "0.801",
                                1548119951
                              ]
                            }
                          },
                          "bid": {
                            "description": "Bid side array of entries `[<price>, <volume>, <timestamp>]`",
                            "type": "array",
                            "items": {
                              "oneOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "integer"
                                }
                              ],
                              "example": [
                                "3538.70000",
                                "0.798",
                                1548119924
                              ]
                            }
                          }
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/Depth?pair=XBTUSD\"\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/Depth?pair=XBTUSD')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/public/Trades": {
      "get": {
        "summary": "Get Recent Trades",
        "description": "Returns the last 1000 trades by default",
        "tags": [
          "Market Data"
        ],
        "operationId": "getRecentTrades",
        "security": [],
        "parameters": [
          {
            "$ref": "#/paths/~1public~1OHLC/get/parameters/0"
          },
          {
            "name": "since",
            "in": "query",
            "description": "Return trade data since given timestamp",
            "schema": {
              "type": "string"
            },
            "example": "1616663618"
          }
        ],
        "responses": {
          "200": {
            "description": "Trade data retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": {
                      "XXBTZUSD": [
                        [
                          "52478.90000",
                          "0.00640000",
                          1616663618.0362,
                          "b",
                          "m",
                          ""
                        ],
                        [
                          "52490.50000",
                          "0.01169993",
                          1616663618.0377,
                          "b",
                          "m",
                          ""
                        ],
                        [
                          "52478.80000",
                          "0.04107375",
                          1616663622.1366,
                          "b",
                          "m",
                          ""
                        ]
                      ],
                      "last": "1616663622136576459"
                    }
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "additionalProperties": {
                        "x-additionalPropertiesName": "pair",
                        "title": "TickData",
                        "description": "Array of trade entries\n`[<price>, <volume>, <time>, <buy/sell>, <market/limit>, <miscellaneous>]`\n",
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ],
                          "example": [
                            "3535.40000",
                            "0.09670735",
                            1548111757.2558,
                            "b",
                            "m",
                            ""
                          ]
                        }
                      },
                      "properties": {
                        "last": {
                          "type": "string",
                          "description": "ID to be used as since when polling for new trade data"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/Trades?pair=XBTUSD\"\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/Trades?pair=XBTUSD')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/public/Spread": {
      "get": {
        "summary": "Get Recent Spreads",
        "tags": [
          "Market Data"
        ],
        "operationId": "getRecentSpreads",
        "security": [],
        "parameters": [
          {
            "$ref": "#/paths/~1public~1OHLC/get/parameters/0"
          },
          {
            "name": "since",
            "in": "query",
            "description": "Return spread data since given ID",
            "schema": {
              "type": "integer"
            },
            "example": 1548122302
          }
        ],
        "responses": {
          "200": {
            "description": "Spread data retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "additionalProperties": {
                        "x-additionalPropertiesName": "pair",
                        "title": "SpreadData",
                        "description": "Array of spread entries\n`[int <time>, string <bid>, string <ask>]`\n",
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            }
                          ],
                          "example": [
                            1548120550,
                            "3538.70000",
                            "3541.50000"
                          ]
                        }
                      },
                      "properties": {
                        "last": {
                          "type": "integer",
                          "description": "ID to be used as since when polling for new spread data"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "XXBTZUSD": [
                      [
                        1548120550,
                        "3538.70000",
                        "3541.50000"
                      ],
                      [
                        1548120551,
                        "3538.80000",
                        "3541.50000"
                      ],
                      [
                        1548120554,
                        "3538.80000",
                        "3541.40000"
                      ]
                    ],
                    "last": 1548122302
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/Spread?pair=XBTUSD\"\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/Spread?pair=XBTUSD')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/GetWebSocketsToken": {
      "post": {
        "summary": "Get Websockets Token",
        "description": "An authentication token must be requested via this REST API endpoint in order to connect to and authenticate with our [Websockets API](https://docs.kraken.com). The token should be used within 15 minutes of creation, but it does not expire once a successful Websockets connection and private subscription has been made and is maintained.\n\n> The 'Access WebSockets API' permission must be enabled for the API key in order to generate the authentication token.\n",
        "tags": [
          "Websockets Authentication"
        ],
        "operationId": "getWebsocketsToken",
        "requestBody": {
          "$ref": "#/paths/~1private~1Balance/post/requestBody"
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"http://api.kraken.com/0/private/GetWebSocketsToken\" \\\n    -H 'API-Key: <YOUR-API-KEY>' \\\n    -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n    -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n    --data-urlencode \"nonce=<YOUR-NONCE>\" \n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\nresp = kraken_request('/0/private/GetWebSocketsToken', {\n    \"nonce\": str(int(1000*time.time()))\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Websockets token retrieved.",
            "content": {
              "application/json": {
                "example": {
                  "error": [],
                  "result": {
                    "token": "1Dwc4lzSwNWOAwkMdqhssNNFhs1ed606d1WcF3XfEMw",
                    "expires": 900
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "description": "Websockets token",
                          "type": "string"
                        },
                        "expires": {
                          "description": "Time (in seconds) after which the token expires",
                          "type": "integer"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/private/Balance": {
      "post": {
        "summary": "Get Account Balance",
        "description": "Retrieve all cash balances, net of pending withdrawals.\n",
        "tags": [
          "User Data"
        ],
        "operationId": "getAccountBalance",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account balances retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": {
                      "ZUSD": "171288.6158",
                      "ZEUR": "504861.8946",
                      "ZGBP": "459567.9171",
                      "ZAUD": "500000.0000",
                      "ZCAD": "500000.0000",
                      "CHF": "500000.0000",
                      "XXBT": "1011.1908877900",
                      "XXRP": "100000.00000000",
                      "XLTC": "2000.0000000000",
                      "XETH": "818.5500000000",
                      "XETC": "1000.0000000000",
                      "XREP": "1000.0000000000",
                      "XXMR": "1000.0000000000",
                      "USDT": "500000.00000000",
                      "DASH": "1000.0000000000",
                      "GNO": "1000.0000000000",
                      "EOS": "1000.0000000000",
                      "BCH": "1016.6005000000",
                      "ADA": "100000.00000000",
                      "QTUM": "1000.0000000000",
                      "XTZ": "100000.00000000",
                      "ATOM": "100000.00000000",
                      "SC": "9999.9999999999",
                      "LSK": "1000.0000000000",
                      "WAVES": "1000.0000000000",
                      "ICX": "1000.0000000000",
                      "BAT": "1000.0000000000",
                      "OMG": "1000.0000000000",
                      "LINK": "1000.0000000000",
                      "DAI": "9999.9999999999",
                      "PAXG": "1000.0000000000",
                      "ALGO": "100000.00000000",
                      "USDC": "100000.00000000",
                      "TRX": "100000.00000000",
                      "DOT": "2.5000000000",
                      "OXT": "1000.0000000000",
                      "ETH2.S": "198.3970800000",
                      "ETH2": "2.5885574330",
                      "USD.M": "1213029.2780"
                    }
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "title": "AccountBalance",
                      "description": "Account Balance",
                      "type": "object",
                      "additionalProperties": {
                        "x-additionalPropertiesName": "asset",
                        "type": "string",
                        "description": "balance"
                      },
                      "example": {
                        "ZUSD": "2970172.7962",
                        "properties": {
                          "balance": {
                            "description": "Asset Balance",
                            "type": "string",
                            "example": "2970172.7962"
                          }
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/Balance\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/Balance', {\n    \"nonce\": str(int(1000*time.time()))\n}, api_key, api_sec)\n\nprint(resp.json())        \n"
          }
        ]
      }
    },
    "/private/TradeBalance": {
      "post": {
        "summary": "Get Trade Balance",
        "description": "Retrieve a summary of collateral balances, margin position valuations, equity and margin level.\n",
        "tags": [
          "User Data"
        ],
        "operationId": "getTradeBalance",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "Update Account Profile Request",
                "description": "Update Account Profile Request Body",
                "required": [
                  "nonce"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "asset": {
                    "description": "Base asset used to determine balance",
                    "type": "string",
                    "default": "ZUSD"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trade balances retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": {
                      "eb": "1101.3425",
                      "tb": "392.2264",
                      "m": "7.0354",
                      "n": "-10.0232",
                      "c": "21.1063",
                      "v": "31.1297",
                      "e": "382.2032",
                      "mf": "375.1678",
                      "ml": "5432.57"
                    }
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "title": "AccountBalance",
                      "description": "Account Balance",
                      "type": "object",
                      "properties": {
                        "eb": {
                          "description": "Equivalent balance (combined balance of all currencies)",
                          "type": "string",
                          "example": "3224744.0162"
                        },
                        "tb": {
                          "description": "Trade balance (combined balance of all equity currencies)",
                          "type": "string",
                          "example": "3224744.0162"
                        },
                        "m": {
                          "description": "Margin amount of open positions",
                          "type": "string",
                          "example": "0.0000"
                        },
                        "n": {
                          "description": "Unrealized net profit/loss of open positions",
                          "type": "string",
                          "example": "0.0000"
                        },
                        "c": {
                          "description": "Cost basis of open positions",
                          "type": "string",
                          "example": "0.0000"
                        },
                        "v": {
                          "description": "Current floating valuation of open positions",
                          "type": "string",
                          "example": "0.0000"
                        },
                        "e": {
                          "description": "Equity: `trade balance + unrealized net profit/loss`",
                          "type": "string",
                          "example": "3224744.0162"
                        },
                        "mf": {
                          "description": "Free margin: `Equity - initial margin (maximum margin available to open new positions)`",
                          "type": "string",
                          "example": "3224744.0162"
                        },
                        "ml": {
                          "description": "Margin level: `(equity / initial margin) * 100`",
                          "type": "string"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/TradeBalance\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>&asset=ZUSD\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/TradeBalance', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"USD\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/OpenOrders": {
      "post": {
        "summary": "Get Open Orders",
        "description": "Retrieve information about currently open orders.\n",
        "tags": [
          "User Data"
        ],
        "operationId": "getOpenOrders",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "Get Open Orders Request Body",
                "required": [
                  "nonce"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "trades": {
                    "description": "Whether or not to include trades related to position in output",
                    "type": "boolean",
                    "default": false
                  },
                  "userref": {
                    "description": "Restrict results to given user reference id",
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Open orders info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": {
                      "open": {
                        "OQCLML-BW3P3-BUCMWZ": {
                          "refid": null,
                          "userref": 0,
                          "status": "open",
                          "opentm": 1616666559.8974,
                          "starttm": 0,
                          "expiretm": 0,
                          "descr": {
                            "pair": "XBTUSD",
                            "type": "buy",
                            "ordertype": "limit",
                            "price": "30010.0",
                            "price2": "0",
                            "leverage": "none",
                            "order": "buy 1.25000000 XBTUSD @ limit 30010.0",
                            "close": ""
                          },
                          "vol": "1.25000000",
                          "vol_exec": "0.37500000",
                          "cost": "11253.7",
                          "fee": "0.00000",
                          "price": "30010.0",
                          "stopprice": "0.00000",
                          "limitprice": "0.00000",
                          "misc": "",
                          "oflags": "fciq",
                          "trades": [
                            "TCCCTY-WE2O6-P3NB37"
                          ]
                        },
                        "OB5VMB-B4U2U-DK2WRW": {
                          "refid": null,
                          "userref": 120,
                          "status": "open",
                          "opentm": 1616665899.5699,
                          "starttm": 0,
                          "expiretm": 0,
                          "descr": {
                            "pair": "XBTUSD",
                            "type": "buy",
                            "ordertype": "limit",
                            "price": "14500.0",
                            "price2": "0",
                            "leverage": "5:1",
                            "order": "buy 0.27500000 XBTUSD @ limit 14500.0 with 5:1 leverage",
                            "close": ""
                          },
                          "vol": "0.27500000",
                          "vol_exec": "0.00000000",
                          "cost": "0.00000",
                          "fee": "0.00000",
                          "price": "0.00000",
                          "stopprice": "0.00000",
                          "limitprice": "0.00000",
                          "misc": "",
                          "oflags": "fciq"
                        },
                        "OXHXGL-F5ICS-6DIC67": {
                          "refid": null,
                          "userref": 120,
                          "status": "open",
                          "opentm": 1616665894.0036,
                          "starttm": 0,
                          "expiretm": 0,
                          "descr": {
                            "pair": "XBTUSD",
                            "type": "buy",
                            "ordertype": "limit",
                            "price": "17500.0",
                            "price2": "0",
                            "leverage": "5:1",
                            "order": "buy 0.27500000 XBTUSD @ limit 17500.0 with 5:1 leverage",
                            "close": ""
                          },
                          "vol": "0.27500000",
                          "vol_exec": "0.00000000",
                          "cost": "0.00000",
                          "fee": "0.00000",
                          "price": "0.00000",
                          "stopprice": "0.00000",
                          "limitprice": "0.00000",
                          "misc": "",
                          "oflags": "fciq"
                        },
                        "OLQCVY-B27XU-MBPCL5": {
                          "refid": null,
                          "userref": 251,
                          "status": "open",
                          "opentm": 1616665556.7646,
                          "starttm": 0,
                          "expiretm": 0,
                          "descr": {
                            "pair": "XBTUSD",
                            "type": "buy",
                            "ordertype": "limit",
                            "price": "23500.0",
                            "price2": "0",
                            "leverage": "none",
                            "order": "buy 0.27500000 XBTUSD @ limit 23500.0",
                            "close": ""
                          },
                          "vol": "0.27500000",
                          "vol_exec": "0.00000000",
                          "cost": "0.00000",
                          "fee": "0.00000",
                          "price": "0.00000",
                          "stopprice": "0.00000",
                          "limitprice": "0.00000",
                          "misc": "",
                          "oflags": "fciq"
                        },
                        "OQCGAF-YRMIQ-AMJTNJ": {
                          "refid": null,
                          "userref": 0,
                          "status": "open",
                          "opentm": 1616665511.0373,
                          "starttm": 0,
                          "expiretm": 0,
                          "descr": {
                            "pair": "XBTUSD",
                            "type": "buy",
                            "ordertype": "limit",
                            "price": "24500.0",
                            "price2": "0",
                            "leverage": "none",
                            "order": "buy 1.25000000 XBTUSD @ limit 24500.0",
                            "close": ""
                          },
                          "vol": "1.25000000",
                          "vol_exec": "0.00000000",
                          "cost": "0.00000",
                          "fee": "0.00000",
                          "price": "0.00000",
                          "stopprice": "0.00000",
                          "limitprice": "0.00000",
                          "misc": "",
                          "oflags": "fciq"
                        }
                      }
                    }
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "title": "OpenOrders",
                      "description": "Open Orders",
                      "type": "object",
                      "properties": {
                        "open": {
                          "type": "object",
                          "additionalProperties": {
                            "x-additionalPropertiesName": "txid",
                            "$ref": "#/paths/~1private~1QueryOrders/post/responses/200/content/application~1json/schema/properties/result/additionalProperties/oneOf/0"
                          }
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/OpenOrders\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>&trades=true\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/OpenOrders', {\n    \"nonce\": str(int(1000*time.time())),\n    \"trades\": True\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/ClosedOrders": {
      "post": {
        "summary": "Get Closed Orders",
        "description": "Retrieve information about orders that have been closed (filled or cancelled). 50 results are returned at a time, the most recent by default.\n\n**Note:** If an order's tx ID is given for `start` or `end` time, the order's opening time (`opentm`) is used\n",
        "tags": [
          "User Data"
        ],
        "operationId": "getClosedOrders",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "Get Closed Orders Request Body",
                "required": [
                  "nonce"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "trades": {
                    "description": "Whether or not to include trades related to position in output",
                    "type": "boolean",
                    "default": false
                  },
                  "userref": {
                    "description": "Restrict results to given user reference id",
                    "type": "integer",
                    "format": "int32"
                  },
                  "start": {
                    "description": "Starting unix timestamp or order tx ID of results (exclusive)",
                    "type": "integer"
                  },
                  "end": {
                    "description": "Ending unix timestamp or order tx ID of results (inclusive)",
                    "type": "integer"
                  },
                  "ofs": {
                    "description": "Result offset for pagination",
                    "type": "integer"
                  },
                  "closetime": {
                    "description": "Which time to use to search",
                    "type": "string",
                    "enum": [
                      "open",
                      "close",
                      "both"
                    ],
                    "default": "both"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Closed orders info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": {
                      "closed": {
                        "O37652-RJWRT-IMO74O": {
                          "refid": null,
                          "userref": 36493663,
                          "status": "canceled",
                          "reason": "User requested",
                          "opentm": 1616148493.7708,
                          "closetm": 1616148610.0482,
                          "starttm": 0,
                          "expiretm": 0,
                          "descr": {
                            "pair": "XBTGBP",
                            "type": "buy",
                            "ordertype": "limit",
                            "price": "2506.0",
                            "price2": "0",
                            "leverage": "none",
                            "order": "buy 0.00100000 XBTGBP @ limit 2506.0",
                            "close": ""
                          },
                          "vol": "0.00100000",
                          "vol_exec": "0.00000000",
                          "cost": "0.00000",
                          "fee": "0.00000",
                          "price": "0.00000",
                          "stopprice": "0.00000",
                          "limitprice": "0.00000",
                          "misc": "",
                          "oflags": "fciq"
                        },
                        "O6YDQ5-LOMWU-37YKEE": {
                          "refid": null,
                          "userref": 36493663,
                          "status": "canceled",
                          "reason": "User requested",
                          "opentm": 1616148493.7708,
                          "closetm": 1616148610.0477,
                          "starttm": 0,
                          "expiretm": 0,
                          "descr": {
                            "pair": "XBTGBP",
                            "type": "buy",
                            "ordertype": "limit",
                            "price": "2518.0",
                            "price2": "0",
                            "leverage": "none",
                            "order": "buy 0.00100000 XBTGBP @ limit 2518.0",
                            "close": ""
                          },
                          "vol": "0.00100000",
                          "vol_exec": "0.00000000",
                          "cost": "0.00000",
                          "fee": "0.00000",
                          "price": "0.00000",
                          "stopprice": "0.00000",
                          "limitprice": "0.00000",
                          "misc": "",
                          "oflags": "fciq"
                        }
                      },
                      "count": 2
                    }
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "title": "ClosedOrders",
                      "description": "Closed Orders",
                      "type": "object",
                      "properties": {
                        "closed": {
                          "type": "object",
                          "additionalProperties": {
                            "x-additionalPropertiesName": "txid",
                            "$ref": "#/paths/~1private~1QueryOrders/post/responses/200/content/application~1json/schema/properties/result/additionalProperties/oneOf/1"
                          }
                        },
                        "count": {
                          "description": "Amount of available order info matching criteria",
                          "type": "integer"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/ClosedOrders\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>&trades=true\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/ClosedOrders', {\n    \"nonce\": str(int(1000*time.time())),\n    \"userref\": 36493663\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/QueryOrders": {
      "post": {
        "summary": "Query Orders Info",
        "description": "Retrieve information about specific orders.\n",
        "tags": [
          "User Data"
        ],
        "operationId": "getOrdersInfo",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "Query Orders Info Request Body",
                "required": [
                  "nonce",
                  "txid"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "trades": {
                    "description": "Whether or not to include trades related to position in output",
                    "type": "boolean",
                    "default": false
                  },
                  "userref": {
                    "description": "Restrict results to given user reference id",
                    "type": "integer",
                    "format": "int32"
                  },
                  "txid": {
                    "description": "Comma delimited list of transaction IDs to query info about (20 maximum)",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Orders info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": {
                      "OBCMZD-JIEE7-77TH3F": {
                        "refid": null,
                        "userref": 0,
                        "status": "closed",
                        "reason": null,
                        "opentm": 1616665496.7808,
                        "closetm": 1616665499.1922,
                        "starttm": 0,
                        "expiretm": 0,
                        "descr": {
                          "pair": "XBTUSD",
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "37500.0",
                          "price2": "0",
                          "leverage": "none",
                          "order": "buy 1.25000000 XBTUSD @ limit 37500.0",
                          "close": ""
                        },
                        "vol": "1.25000000",
                        "vol_exec": "1.25000000",
                        "cost": "37526.2",
                        "fee": "37.5",
                        "price": "30021.0",
                        "stopprice": "0.00000",
                        "limitprice": "0.00000",
                        "misc": "",
                        "oflags": "fciq",
                        "trades": [
                          "TZX2WP-XSEOP-FP7WYR"
                        ]
                      },
                      "OMMDB2-FSB6Z-7W3HPO": {
                        "refid": null,
                        "userref": 0,
                        "status": "closed",
                        "reason": null,
                        "opentm": 1616592012.2317,
                        "closetm": 1616592012.2335,
                        "starttm": 0,
                        "expiretm": 0,
                        "descr": {
                          "pair": "XBTUSD",
                          "type": "sell",
                          "ordertype": "market",
                          "price": "0",
                          "price2": "0",
                          "leverage": "none",
                          "order": "sell 0.25000000 XBTUSD @ market",
                          "close": ""
                        },
                        "vol": "0.25000000",
                        "vol_exec": "0.25000000",
                        "cost": "7500.0",
                        "fee": "7.5",
                        "price": "30000.0",
                        "stopprice": "0.00000",
                        "limitprice": "0.00000",
                        "misc": "",
                        "oflags": "fcib",
                        "trades": [
                          "TJUW2K-FLX2N-AR2FLU"
                        ]
                      }
                    }
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "additionalProperties": {
                        "x-additionalPropertiesName": "txid",
                        "oneOf": [
                          {
                            "title": "OpenOrder",
                            "description": "Open Order",
                            "allOf": [
                              {
                                "$ref": "#/paths/~1private~1QueryOrders/post/responses/200/content/application~1json/schema/properties/result/additionalProperties/oneOf/1/allOf/0"
                              }
                            ]
                          },
                          {
                            "title": "ClosedOrder",
                            "description": "Closed Order",
                            "allOf": [
                              {
                                "title": "OpenOrder",
                                "description": "Open Order",
                                "type": "object",
                                "properties": {
                                  "refid": {
                                    "description": "Referral order transaction ID that created this order",
                                    "type": "string"
                                  },
                                  "userref": {
                                    "description": "User reference id",
                                    "type": "string"
                                  },
                                  "status": {
                                    "description": "Status of order\n  * pending = order pending book entry\n  * open = open order\n  * closed = closed order\n  * canceled = order canceled\n  * expired = order expired\n",
                                    "type": "string",
                                    "enum": [
                                      "pending",
                                      "open",
                                      "closed",
                                      "canceled",
                                      "expired"
                                    ]
                                  },
                                  "opentm": {
                                    "description": "Unix timestamp of when order was placed",
                                    "type": "number"
                                  },
                                  "starttm": {
                                    "description": "Unix timestamp of order start time (or 0 if not set)",
                                    "type": "number"
                                  },
                                  "expiretm": {
                                    "description": "Unix timestamp of order end time (or 0 if not set)",
                                    "type": "number"
                                  },
                                  "descr": {
                                    "title": "OrderDescription",
                                    "description": "Order description info",
                                    "type": "object",
                                    "properties": {
                                      "pair": {
                                        "description": "Asset pair",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "Type of order (buy/sell)",
                                        "type": "string",
                                        "enum": [
                                          "buy",
                                          "sell"
                                        ]
                                      },
                                      "ordertype": {
                                        "$ref": "#/paths/~1private~1AddOrder/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/ordertype"
                                      },
                                      "price": {
                                        "description": "primary price",
                                        "type": "string"
                                      },
                                      "price2": {
                                        "description": "Secondary price",
                                        "type": "string"
                                      },
                                      "leverage": {
                                        "description": "Amount of leverage",
                                        "type": "string"
                                      },
                                      "order": {
                                        "description": "Order description",
                                        "type": "string"
                                      },
                                      "close": {
                                        "description": "Conditional close order description (if conditional close set)",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "vol": {
                                    "description": "Volume of order (base currency)",
                                    "type": "string"
                                  },
                                  "vol_exec": {
                                    "description": "Volume executed (base currency)",
                                    "type": "string"
                                  },
                                  "cost": {
                                    "description": "Total cost (quote currency unless)",
                                    "type": "string"
                                  },
                                  "fee": {
                                    "description": "Total fee (quote currency)",
                                    "type": "string"
                                  },
                                  "price": {
                                    "description": "Average price (quote currency)",
                                    "type": "string"
                                  },
                                  "stopprice": {
                                    "description": "Stop price (quote currency)",
                                    "type": "string"
                                  },
                                  "limitprice": {
                                    "description": "Triggered limit price (quote currency, when limit based order type triggered)",
                                    "type": "string"
                                  },
                                  "misc": {
                                    "description": "Comma delimited list of miscellaneous info\n\n  * `stopped` triggered by stop price\n  * `touched` triggered by touch price\n  * `liquidated` liquidation\n  * `partial` partial fill\n",
                                    "type": "string"
                                  },
                                  "oflags": {
                                    "$ref": "#/paths/~1private~1AddOrder/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/oflags"
                                  },
                                  "trades": {
                                    "description": "List of trade IDs related to order (if trades info requested and data available)",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "closetm": {
                                    "description": "Unix timestamp of when order was closed",
                                    "type": "number"
                                  },
                                  "reason": {
                                    "description": "Additional info on status (if any)",
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"http://api.kraken.com/0/private/QueryOrders\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>&trades=true\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/QueryOrders', {\n    \"nonce\": str(int(1000*time.time())),\n    \"txid\": \"OBCMZD-JIEE7-77TH3F,OMMDB2-FSB6Z-7W3HPO\",\n    \"trades\": True\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/TradesHistory": {
      "post": {
        "summary": "Get Trades History",
        "description": "Retrieve information about trades/fills. 50 results are returned at a time, the most recent by default.\n* Unless otherwise stated, costs, fees, prices, and volumes are specified with the precision for the asset pair (`pair_decimals` and `lot_decimals`), not the individual assets' precision (`decimals`).\n",
        "tags": [
          "User Data"
        ],
        "operationId": "getTradeHistory",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "Get Trades History Request Body",
                "required": [
                  "nonce"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "type": {
                    "description": "Type of trade",
                    "type": "string",
                    "default": "all",
                    "enum": [
                      "all",
                      "any position",
                      "closed position",
                      "closing position",
                      "no position"
                    ]
                  },
                  "trades": {
                    "description": "Whether or not to include trades related to position in output",
                    "type": "boolean",
                    "default": false
                  },
                  "start": {
                    "description": "Starting unix timestamp or trade tx ID of results (exclusive)",
                    "type": "integer"
                  },
                  "end": {
                    "description": "Ending unix timestamp or trade tx ID of results (inclusive)",
                    "type": "integer"
                  },
                  "ofs": {
                    "description": "Result offset for pagination",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trade history retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": {
                      "trades": {
                        "THVRQM-33VKH-UCI7BS": {
                          "ordertxid": "OQCLML-BW3P3-BUCMWZ",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZUSD",
                          "time": 1616667796.8802,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "30010.00000",
                          "cost": "600.20000",
                          "fee": "0.00000",
                          "vol": "0.02000000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TCWJEG-FL4SZ-3FKGH6": {
                          "ordertxid": "OQCLML-BW3P3-BUCMWZ",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZUSD",
                          "time": 1616667769.6396,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "30010.00000",
                          "cost": "300.10000",
                          "fee": "0.00000",
                          "vol": "0.01000000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TCCCTY-WE2O6-P3NB37": {
                          "ordertxid": "OQCLML-BW3P3-BUCMWZ",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZUSD",
                          "time": 1616666586.6077,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "30010.00000",
                          "cost": "11253.75000",
                          "fee": "0.00000",
                          "vol": "0.37500000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TZX2WP-XSEOP-FP7WYR": {
                          "ordertxid": "OBCMZD-JIEE7-77TH3F",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZUSD",
                          "time": 1616665496.7842,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "30021.00000",
                          "cost": "37526.25000",
                          "fee": "37.52500",
                          "vol": "1.25000000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TJUW2K-FLX2N-AR2FLU": {
                          "ordertxid": "OMMDB2-FSB6Z-7W3HPO",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZUSD",
                          "time": 1616592012.2334,
                          "type": "sell",
                          "ordertype": "market",
                          "price": "30000.00000",
                          "cost": "7500.00000",
                          "fee": "7.50000",
                          "vol": "0.25000000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TKTFJU-O5OIY-63ZBF4": {
                          "ordertxid": "OFWNMX-VIOHE-HCYVU6",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZUSD",
                          "time": 1616591594.5669,
                          "type": "sell",
                          "ordertype": "limit",
                          "price": "30000.00000",
                          "cost": "15000.00000",
                          "fee": "15.00000",
                          "vol": "0.50000000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TRJPJP-6VYIP-5XLJZA": {
                          "ordertxid": "O3XCSX-SLY3X-LGHPI3",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZUSD",
                          "time": 1616522002.4217,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "30014.00000",
                          "cost": "37517.50000",
                          "fee": "37.51592",
                          "vol": "1.25000000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TSALPW-Q3HPI-LEPCOA": {
                          "ordertxid": "O6355P-ESPHJ-PEXFBY",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZUSD",
                          "time": 1616521990.7427,
                          "type": "sell",
                          "ordertype": "limit",
                          "price": "30000.00000",
                          "cost": "150000.00000",
                          "fee": "150.00000",
                          "vol": "5.00000000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TQ7WSQ-U3R7T-ZUMFIY": {
                          "ordertxid": "ONZOB7-3ESLV-IQ2PZT",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZUSD",
                          "time": 1616521380.6707,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "30013.43386",
                          "cost": "37516.79233",
                          "fee": "37.51606",
                          "vol": "1.25000000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "T42BLA-LGJHI-LPVTTD": {
                          "ordertxid": "O3DZBO-5SI2M-S6WCNU",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZUSD",
                          "time": 1616521336.9991,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "30013.00000",
                          "cost": "37516.25000",
                          "fee": "37.51597",
                          "vol": "1.25000000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TUI2JG-VOE36-SW7UJQ": {
                          "ordertxid": "OZABVF-MIK6V-L3ZTOE",
                          "postxid": "TF5GVO-T7ZZ2-6NBKBI",
                          "pair": "XXBTZUSD",
                          "time": 1616511385.1402,
                          "type": "sell",
                          "ordertype": "limit",
                          "price": "30000.00000",
                          "cost": "60.00000",
                          "fee": "0.06000",
                          "vol": "0.00200000",
                          "margin": "12.00000",
                          "misc": "closing"
                        },
                        "TXSFI3-5CTX5-LPTJHK": {
                          "ordertxid": "OICKON-6IMOR-2ODO5A",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZUSD",
                          "time": 1616511195.1372,
                          "type": "sell",
                          "ordertype": "limit",
                          "price": "30000.00000",
                          "cost": "60.00000",
                          "fee": "0.06000",
                          "vol": "0.00200000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TDRIF6-7SGNJ-IAXFCN": {
                          "ordertxid": "OL5EF7-LFZFJ-QBFM2A",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZUSD",
                          "time": 1616492377.7001,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "30012.00000",
                          "cost": "37515.00000",
                          "fee": "37.51383",
                          "vol": "1.25000000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "T2PT3E-H6OGF-F5UABV": {
                          "ordertxid": "ONVNZL-MHDOA-CES7XV",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZUSD",
                          "time": 1616008928.0982,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "30008.50000",
                          "cost": "15004.25000",
                          "fee": "0.00000",
                          "vol": "0.50000000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TJPO67-7TNED-Y2BRWM": {
                          "ordertxid": "ONVNZL-MHDOA-CES7XV",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZUSD",
                          "time": 1616006978.5925,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "30008.00000",
                          "cost": "68058.14400",
                          "fee": "68.06066",
                          "vol": "2.26800000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TYYGJC-KEK4Q-L42ZQ4": {
                          "ordertxid": "OG45VQ-ZYQT7-TGLEZR",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZUSD",
                          "time": 1616005993.5273,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "30006.53702",
                          "cost": "135164.44600",
                          "fee": "135.16765",
                          "vol": "4.50450000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TKK7S7-ZMT6O-AGOP6D": {
                          "ordertxid": "OKZ4TV-6ZJRL-6X2WTO",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.2458,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.17229",
                          "fee": "0.00000",
                          "vol": "0.00017212",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TP5XQL-ZN5PG-L6VSNV": {
                          "ordertxid": "OAU5VR-4IAXN-SJW5YB",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.2436,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TTIWU5-NQ4VO-JC5BQN": {
                          "ordertxid": "OJ3BNG-YDA52-MDMETR",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.2412,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TMBTRV-FTDNZ-P3HUV5": {
                          "ordertxid": "O5X65H-KXHCL-QCLYCT",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.2388,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TY44ZN-AIYOJ-SDR7GK": {
                          "ordertxid": "OEKLOP-RDAOE-FZWGKN",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.2367,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "T5NRGS-AKQZV-ZHG4E4": {
                          "ordertxid": "OICCXO-CRHEQ-LT67QB",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.234,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "T7CBB7-AQ5O7-P5GQSK": {
                          "ordertxid": "O7ABWG-VU27X-YP2XDI",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.2312,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TENBB5-7BZEQ-TNBE66": {
                          "ordertxid": "O4AIPT-GX3QH-HZGYCH",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.2283,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TVLXY3-C6N3I-T25754": {
                          "ordertxid": "OW4Z6S-DSUGW-DFTKBT",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.226,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TJH4MR-DOYCR-5555SK": {
                          "ordertxid": "OGHH7F-C74EX-7GAM4K",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.2234,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TXQ36N-GN7IZ-5PKY7L": {
                          "ordertxid": "OPVBIW-AJXET-VNXDJ7",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.221,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "T6LBB6-IFMBI-4YPXBX": {
                          "ordertxid": "OKOPXR-U4D6F-GBS4KJ",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.2183,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "T4M6VU-EECSP-MELY5T": {
                          "ordertxid": "OJI43X-GINSU-QWE6DK",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.2157,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TQA5B5-EZLVE-KTM4M5": {
                          "ordertxid": "O4AARU-PTKL7-HSPOEL",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.2128,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TKSIRP-ZUYPW-62FLMV": {
                          "ordertxid": "O6MGUZ-XVWWN-GJC3A2",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.2104,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TUEHX7-FFLNW-JMFAR7": {
                          "ordertxid": "OY2YWA-4BNZ2-2VMP4Z",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.2079,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TJKYBR-A5AYL-24MXFU": {
                          "ordertxid": "OZ45GG-Y7SGJ-NR4B5A",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.2052,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TRKPR4-GWUOY-CHPNRN": {
                          "ordertxid": "OL2F4Z-4WGHJ-HMMCJ2",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614110456.2021,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.11299",
                          "fee": "0.00000",
                          "vol": "0.00011288",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "T37GPE-X26FG-5ZSIIB": {
                          "ordertxid": "OL2F4Z-4WGHJ-HMMCJ2",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614082549.3409,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.08721",
                          "fee": "0.00000",
                          "vol": "0.00008712",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TQM3FZ-THK6L-XSHSBX": {
                          "ordertxid": "OVKIE5-LM7NM-NWTF64",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614082549.3379,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TVDJWV-BADZ2-CV2THT": {
                          "ordertxid": "O4UMTF-7XT6W-4TEAJ5",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614082549.3348,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "T3TO6H-GZ3UQ-SFA567": {
                          "ordertxid": "OAUJQY-M2LW7-URI6P4",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614082549.3319,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TQVOXK-5MOHP-SI5VAV": {
                          "ordertxid": "OXWORC-FSWRK-VCYRD5",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614082549.3292,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "T4H46E-SDKQ2-MN47XT": {
                          "ordertxid": "OWWORE-77UTK-24JC4S",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614082549.3268,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TQMMMA-2OWI3-REGYSF": {
                          "ordertxid": "ORVBV5-WMOB2-XIS2O7",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614082549.3242,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TJXDW4-C2AL5-MVS4S7": {
                          "ordertxid": "OJQVC6-2DL7T-N2VG6R",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614082549.3215,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TW7OM6-3AZPP-KHOCDH": {
                          "ordertxid": "OIY22N-PA6L3-VZRYWY",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614082549.3189,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TVLE6Y-7THFG-DEWRL2": {
                          "ordertxid": "OEOV45-VCSQF-6JC62L",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614082549.3165,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TTEUX3-HDAAA-RC2RUO": {
                          "ordertxid": "OH76VO-UKWAD-PSBDX6",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614082549.3138,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TK5SLP-HK2DZ-HJAQ3P": {
                          "ordertxid": "OVL7YT-LDN4Z-R4O4QD",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614082549.3108,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TB27WI-UMAET-QOYYZL": {
                          "ordertxid": "ORSERE-GNHBA-UDAJNL",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614082549.3079,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TEFPZR-SAZHO-HCT2LJ": {
                          "ordertxid": "OIMMOC-QVPMC-UA35DQ",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614082549.3051,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TS6BLY-CYHBC-35B2WE": {
                          "ordertxid": "O2MDN6-6Y6IB-TSVEHO",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614082549.3015,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        },
                        "TUBIJ2-LJD26-EW3WKN": {
                          "ordertxid": "OFJVXE-B6PHS-HPNIXU",
                          "postxid": "TKH2SE-M7IF5-CFI7LT",
                          "pair": "XXBTZEUR",
                          "time": 1614082549.2986,
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "1001.00000",
                          "cost": "0.20020",
                          "fee": "0.00000",
                          "vol": "0.00020000",
                          "margin": "0.00000",
                          "misc": ""
                        }
                      },
                      "count": 2346
                    }
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "title": "TradeHistory",
                      "description": "Trade History",
                      "type": "object",
                      "properties": {
                        "trades": {
                          "description": "Trade info",
                          "type": "object",
                          "additionalProperties": {
                            "x-additionalPropertiesName": "txid",
                            "$ref": "#/paths/~1private~1QueryTrades/post/responses/200/content/application~1json/schema/properties/result/additionalProperties"
                          }
                        },
                        "count": {
                          "description": "Amount of available trades matching criteria",
                          "type": "integer"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"http://api.kraken.com/0/private/TradesHistory\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>&trades=true\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/TradesHistory', {\n    \"nonce\": str(int(1000*time.time())),\n    \"trades\": True\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/QueryTrades": {
      "post": {
        "summary": "Query Trades Info",
        "description": "Retrieve information about specific trades/fills.\n",
        "tags": [
          "User Data"
        ],
        "operationId": "getTradesInfo",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "Get Trades Info Request Body",
                "required": [
                  "nonce"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "txid": {
                    "description": "Comma delimited list of transaction IDs to query info about (20 maximum)",
                    "type": "string"
                  },
                  "trades": {
                    "description": "Whether or not to include trades related to position in output",
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trades info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "description": "Trade info",
                      "type": "object",
                      "additionalProperties": {
                        "x-additionalPropertiesName": "txid",
                        "title": "Trade",
                        "description": "Trade Info",
                        "type": "object",
                        "properties": {
                          "ordertxid": {
                            "description": "Order responsible for execution of trade",
                            "type": "string"
                          },
                          "pair": {
                            "description": "Asset pair",
                            "type": "string"
                          },
                          "time": {
                            "description": "Unix timestamp of trade",
                            "type": "number"
                          },
                          "type": {
                            "description": "Type of order (buy/sell)",
                            "type": "string"
                          },
                          "ordertype": {
                            "description": "Order type",
                            "type": "string"
                          },
                          "price": {
                            "description": "Average price order was executed at (quote currency)",
                            "type": "string"
                          },
                          "cost": {
                            "description": "Total cost of order (quote currency)",
                            "type": "string"
                          },
                          "fee": {
                            "description": "Total fee (quote currency)",
                            "type": "string"
                          },
                          "vol": {
                            "description": "Volume (base currency)",
                            "type": "string"
                          },
                          "margin": {
                            "description": "Initial margin (quote currency)",
                            "type": "string"
                          },
                          "misc": {
                            "description": "Comma delimited list of miscellaneous info:\n* `closing` &mdash; Trade closes all or part of a position\n",
                            "type": "string"
                          },
                          "posstatus": {
                            "description": "Position status (open/closed)\n<br><sub><sup>Only present if trade opened a position</sub></sup>\n",
                            "type": "string"
                          },
                          "cprice": {
                            "description": "Average price of closed portion of position (quote currency)\n<br><sub><sup>Only present if trade opened a position</sub></sup>\n"
                          },
                          "ccost": {
                            "description": "Total cost of closed portion of position (quote currency)\n<br><sub><sup>Only present if trade opened a position</sub></sup>\n"
                          },
                          "cfee": {
                            "description": "Total fee of closed portion of position (quote currency)\n<br><sub><sup>Only present if trade opened a position</sub></sup>\n"
                          },
                          "cvol": {
                            "description": "Total fee of closed portion of position (quote currency)\n<br><sub><sup>Only present if trade opened a position</sub></sup>\n"
                          },
                          "cmargin": {
                            "description": "Total margin freed in closed portion of position (quote currency)\n<br><sub><sup>Only present if trade opened a position</sub></sup>\n"
                          },
                          "net": {
                            "description": "Net profit/loss of closed portion of position (quote currency, quote currency scale)\n<br><sub><sup>Only present if trade opened a position</sub></sup>\n"
                          },
                          "trades": {
                            "description": "List of closing trades for position (if available)\n<br><sub><sup>Only present if trade opened a position</sub></sup>\n",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                      }
                    }
                  },
                  "example": {
                    "error": [],
                    "result": {
                      "THVRQM-33VKH-UCI7BS": {
                        "ordertxid": "OQCLML-BW3P3-BUCMWZ",
                        "postxid": "TKH2SE-M7IF5-CFI7LT",
                        "pair": "XXBTZUSD",
                        "time": 1616667796.8802,
                        "type": "buy",
                        "ordertype": "limit",
                        "price": "30010.00000",
                        "cost": "600.20000",
                        "fee": "0.00000",
                        "vol": "0.02000000",
                        "margin": "0.00000",
                        "misc": ""
                      },
                      "TTEUX3-HDAAA-RC2RUO": {
                        "ordertxid": "OH76VO-UKWAD-PSBDX6",
                        "postxid": "TKH2SE-M7IF5-CFI7LT",
                        "pair": "XXBTZEUR",
                        "time": 1614082549.3138,
                        "type": "buy",
                        "ordertype": "limit",
                        "price": "1001.00000",
                        "cost": "0.20020",
                        "fee": "0.00000",
                        "vol": "0.00020000",
                        "margin": "0.00000",
                        "misc": ""
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"http://api.kraken.com/0/private/QueryTrades\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>&txid=TRWCIF-3MJWU-5DYJG5,TNGJFU-5CD67-ZV3AEO\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/QueryTrades', {\n    \"nonce\": str(int(1000*time.time())),\n    \"txid\": \"THVRQM-33VKH-UCI7BS,TTEUX3-HDAAA-RC2RUO\",\n    \"trades\": True\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/OpenPositions": {
      "post": {
        "summary": "Get Open Positions",
        "description": "Get information about open margin positions.",
        "tags": [
          "User Data"
        ],
        "operationId": "getOpenPositions",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "txid": {
                    "type": "string",
                    "description": "Comma delimited list of txids to limit output to"
                  },
                  "docalcs": {
                    "type": "boolean",
                    "description": "Whether to include P&L calculations",
                    "default": false
                  },
                  "consolidation": {
                    "type": "string",
                    "description": "Consolidate positions by market/pair",
                    "enum": [
                      "market"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Open positions info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "object",
                      "additionalProperties": {
                        "x-additionalPropertiesName": "txid",
                        "properties": {
                          "ordertxid": {
                            "type": "string",
                            "description": "Order ID responsible for the position"
                          },
                          "posstatus": {
                            "type": "string",
                            "description": "Position status",
                            "enum": [
                              "open"
                            ]
                          },
                          "pair": {
                            "type": "string",
                            "description": "Asset pair"
                          },
                          "time": {
                            "type": "number",
                            "description": "Unix timestamp of trade"
                          },
                          "type": {
                            "type": "string",
                            "description": "Direction (buy/sell) of position"
                          },
                          "ordertype": {
                            "type": "string",
                            "description": "Order type used to open position"
                          },
                          "cost": {
                            "type": "string",
                            "description": "Opening cost of position (in quote currency)"
                          },
                          "fee": {
                            "type": "string",
                            "description": "Opening fee of position (in quote currency)"
                          },
                          "vol": {
                            "type": "string",
                            "description": "Position opening size (in base currency)"
                          },
                          "vol_closed": {
                            "type": "string",
                            "description": "Quantity closed (in base currency)"
                          },
                          "margin": {
                            "type": "string",
                            "description": "Initial margin consumed (in quote currency)"
                          },
                          "value": {
                            "type": "string",
                            "description": "Current value of remaining position (if `docalcs` requested)"
                          },
                          "net": {
                            "type": "string",
                            "description": "Unrealised P&L of remaining position (if `docalcs` requested)"
                          },
                          "terms": {
                            "type": "string",
                            "description": "Funding cost and term of position"
                          },
                          "rollovertm": {
                            "type": "string",
                            "description": "Timestamp of next margin rollover fee"
                          },
                          "misc": {
                            "type": "string",
                            "description": "Comma delimited list of add'l info"
                          },
                          "oflags": {
                            "type": "string",
                            "description": "Comma delimited list of opening order flags"
                          }
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "TF5GVO-T7ZZ2-6NBKBI": {
                      "ordertxid": "OLWNFG-LLH4R-D6SFFP",
                      "posstatus": "open",
                      "pair": "XXBTZUSD",
                      "time": 1605280097.8294,
                      "type": "buy",
                      "ordertype": "limit",
                      "cost": "104610.52842",
                      "fee": "289.06565",
                      "vol": "8.82412861",
                      "vol_closed": "0.20200000",
                      "margin": "20922.10568",
                      "value": "258797.5",
                      "net": "+154186.9728",
                      "terms": "0.0100% per 4 hours",
                      "rollovertm": "1616672637",
                      "misc": "",
                      "oflags": ""
                    },
                    "T24DOR-TAFLM-ID3NYP": {
                      "ordertxid": "OIVYGZ-M5EHU-ZRUQXX",
                      "posstatus": "open",
                      "pair": "XXBTZUSD",
                      "time": 1607943827.3172,
                      "type": "buy",
                      "ordertype": "limit",
                      "cost": "145756.76856",
                      "fee": "335.24057",
                      "vol": "8.00000000",
                      "vol_closed": "0.00000000",
                      "margin": "29151.35371",
                      "value": "240124.0",
                      "net": "+94367.2314",
                      "terms": "0.0100% per 4 hours",
                      "rollovertm": "1616672637",
                      "misc": "",
                      "oflags": ""
                    },
                    "TYMRFG-URRG5-2ZTQSD": {
                      "ordertxid": "OF5WFH-V57DP-QANDAC",
                      "posstatus": "open",
                      "pair": "XXBTZUSD",
                      "time": 1610448039.8374,
                      "type": "buy",
                      "ordertype": "limit",
                      "cost": "0.00240",
                      "fee": "0.00000",
                      "vol": "0.00000010",
                      "vol_closed": "0.00000000",
                      "margin": "0.00048",
                      "value": "0",
                      "net": "+0.0006",
                      "terms": "0.0100% per 4 hours",
                      "rollovertm": "1616672637",
                      "misc": "",
                      "oflags": ""
                    },
                    "TAFGBN-TZNFC-7CCYIM": {
                      "ordertxid": "OF5WFH-V57DP-QANDAC",
                      "posstatus": "open",
                      "pair": "XXBTZUSD",
                      "time": 1610448039.8448,
                      "type": "buy",
                      "ordertype": "limit",
                      "cost": "2.40000",
                      "fee": "0.00264",
                      "vol": "0.00010000",
                      "vol_closed": "0.00000000",
                      "margin": "0.48000",
                      "value": "3.0",
                      "net": "+0.6015",
                      "terms": "0.0100% per 4 hours",
                      "rollovertm": "1616672637",
                      "misc": "",
                      "oflags": ""
                    },
                    "T4O5L3-4VGS4-IRU2UL": {
                      "ordertxid": "OF5WFH-V57DP-QANDAC",
                      "posstatus": "open",
                      "pair": "XXBTZUSD",
                      "time": 1610448040.7722,
                      "type": "buy",
                      "ordertype": "limit",
                      "cost": "21.59760",
                      "fee": "0.02376",
                      "vol": "0.00089990",
                      "vol_closed": "0.00000000",
                      "margin": "4.31952",
                      "value": "27.0",
                      "net": "+5.4133",
                      "terms": "0.0100% per 4 hours",
                      "rollovertm": "1616672637",
                      "misc": "",
                      "oflags": ""
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/OpenPositions', {\n    \"nonce\": str(int(1000*time.time())),\n    \"docalcs\": True\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/Ledgers": {
      "post": {
        "summary": "Get Ledgers Info",
        "description": "Retrieve information about ledger entries. 50 results are returned at a time, the most recent by default.\n",
        "tags": [
          "User Data"
        ],
        "operationId": "getLedgers",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "Get Ledgers Info Request Body",
                "required": [
                  "nonce"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "asset": {
                    "description": "Comma delimited list of assets to restrict output to",
                    "type": "string",
                    "default": "all"
                  },
                  "aclass": {
                    "description": "Asset class",
                    "type": "string",
                    "default": "currency"
                  },
                  "type": {
                    "description": "Type of ledger to retrieve",
                    "type": "string",
                    "default": "all",
                    "enum": [
                      "all",
                      "deposit",
                      "withdrawal",
                      "trade",
                      "margin"
                    ]
                  },
                  "start": {
                    "description": "Starting unix timestamp or ledger ID of results (exclusive)",
                    "type": "integer"
                  },
                  "end": {
                    "description": "Ending unix timestamp or ledger ID of results (inclusive)",
                    "type": "integer"
                  },
                  "ofs": {
                    "description": "Result offset for pagination",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ledgers info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": {
                      "ledger": {
                        "L4UESK-KG3EQ-UFO4T5": {
                          "refid": "TJKLXF-PGMUI-4NTLXU",
                          "time": 1610464484.1787,
                          "type": "trade",
                          "subtype": "",
                          "aclass": "currency",
                          "asset": "ZGBP",
                          "amount": "-24.5000",
                          "fee": "0.0490",
                          "balance": "459567.9171"
                        },
                        "LMKZCZ-Z3GVL-CXKK4H": {
                          "refid": "TBZIP2-F6QOU-TMB6FY",
                          "time": 1610444262.8888,
                          "type": "trade",
                          "subtype": "",
                          "aclass": "currency",
                          "asset": "ZGBP",
                          "amount": "0.9852",
                          "fee": "0.0010",
                          "balance": "459592.4661"
                        },
                        "L62PIO-H6GVL-RU7P2V": {
                          "refid": "TJ6FXZ-NW2GP-7MUKRH",
                          "time": 1610444237.1186,
                          "type": "trade",
                          "subtype": "",
                          "aclass": "currency",
                          "asset": "ZGBP",
                          "amount": "0.9852",
                          "fee": "0.0010",
                          "balance": "459591.4819"
                        },
                        "LYMXD5-CQXKP-YBJUC5": {
                          "refid": "TQETZH-4IU6L-Y7A6MX",
                          "time": 1610443726.5242,
                          "type": "trade",
                          "subtype": "",
                          "aclass": "currency",
                          "asset": "ZGBP",
                          "amount": "0.9852",
                          "fee": "0.0010",
                          "balance": "459590.4977"
                        },
                        "LTS2VY-3V54Z-UYMBJE": {
                          "refid": "TRTH6D-XH4OI-AWHIPE",
                          "time": 1610443700.5213,
                          "type": "trade",
                          "subtype": "",
                          "aclass": "currency",
                          "asset": "ZGBP",
                          "amount": "0.9852",
                          "fee": "0.0010",
                          "balance": "459589.5135"
                        },
                        "LBPAFZ-VIWB4-3LEIZK": {
                          "refid": "THW22F-LGPSJ-JF75IZ",
                          "time": 1610443673.6795,
                          "type": "trade",
                          "subtype": "",
                          "aclass": "currency",
                          "asset": "ZGBP",
                          "amount": "0.9852",
                          "fee": "0.0010",
                          "balance": "459588.5293"
                        },
                        "L6FQNL-X2KVP-EK3B6P": {
                          "refid": "TQE4OJ-2SS75-DVZXUS",
                          "time": 1610411381.7107,
                          "type": "trade",
                          "subtype": "",
                          "aclass": "currency",
                          "asset": "ZGBP",
                          "amount": "-24.7360",
                          "fee": "0.0247",
                          "balance": "459587.5451"
                        },
                        "LI25LJ-HGRV5-3XTQ4S": {
                          "refid": "TYD2KL-FYR3T-TAK3GQ",
                          "time": 1610411299.5976,
                          "type": "trade",
                          "subtype": "",
                          "aclass": "currency",
                          "asset": "ZGBP",
                          "amount": "-24.7370",
                          "fee": "0.0247",
                          "balance": "459612.3058"
                        },
                        "LOZQ2J-KQMA7-ONUKJQ": {
                          "refid": "TNDLFB-VMRSR-VREQZH",
                          "time": 1610411228.747,
                          "type": "trade",
                          "subtype": "",
                          "aclass": "currency",
                          "asset": "ZGBP",
                          "amount": "-24.7090",
                          "fee": "0.0494",
                          "balance": "459637.0675"
                        },
                        "L27TEO-QPDH4-O5FHKS": {
                          "refid": "TOYTLL-3AJZI-J3SASM",
                          "time": 1610411228.7432,
                          "type": "trade",
                          "subtype": "",
                          "aclass": "currency",
                          "asset": "ZGBP",
                          "amount": "-22.0000",
                          "fee": "0.0440",
                          "balance": "459661.8259"
                        },
                        "LIXT22-MNMIS-AILGP7": {
                          "refid": "TSHOGM-MIWTA-WLBGWW",
                          "time": 1610124514.0877,
                          "type": "trade",
                          "subtype": "",
                          "aclass": "currency",
                          "asset": "ZGBP",
                          "amount": "-1.6370",
                          "fee": "0.0016",
                          "balance": "459683.8699"
                        },
                        "L3DSXB-EDXWW-FWGY6E": {
                          "refid": "TGW4MX-E624F-MG6QZA",
                          "time": 1610124514.0858,
                          "type": "trade",
                          "subtype": "",
                          "aclass": "currency",
                          "asset": "ZGBP",
                          "amount": "-2.0950",
                          "fee": "0.0021",
                          "balance": "459685.5085"
                        },
                        "LTIAS4-WQEAS-4VEU5O": {
                          "refid": "TBAUTS-6WHY3-YMLIDI",
                          "time": 1610124514.0841,
                          "type": "trade",
                          "subtype": "",
                          "aclass": "currency",
                          "asset": "ZGBP",
                          "amount": "-2.1280",
                          "fee": "0.0021",
                          "balance": "459687.6056"
                        },
                        "LBXAYN-2PKLC-5HQYUP": {
                          "refid": "T4JWBD-6JM4T-CIHS5E",
                          "time": 1610124514.0821,
                          "type": "trade",
                          "subtype": "",
                          "aclass": "currency",
                          "asset": "ZGBP",
                          "amount": "-2.1280",
                          "fee": "0.0021",
                          "balance": "459689.7357"
                        },
                        "L77IRV-V5QGW-XFIVFT": {
                          "refid": "TA3YRJ-H3UBH-GW5NFU",
                          "time": 1610124514.08,
                          "type": "trade",
                          "subtype": "",
                          "aclass": "currency",
                          "asset": "ZGBP",
                          "amount": "-2.1620",
                          "fee": "0.0022",
                          "balance": "459691.8658"
                        }
                      },
                      "count": 15
                    }
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "title": "LedgersInfo",
                      "description": "Ledgers Info",
                      "type": "object",
                      "properties": {
                        "ledger": {
                          "type": "object",
                          "additionalProperties": {
                            "x-additionalPropertiesName": "ledger_id",
                            "$ref": "#/paths/~1private~1QueryLedgers/post/responses/200/content/application~1json/schema/properties/result/additionalProperties"
                          }
                        },
                        "count": {
                          "description": "Amount of available ledger info matching criteria",
                          "type": "integer"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/Ledgers\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n    \n# Construct the request and print the result\nresp = kraken_request('/0/private/Ledgers', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"GBP\",\n    \"start\": 1610124514\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/QueryLedgers": {
      "post": {
        "summary": "Query Ledgers",
        "description": "Retrieve information about specific ledger entries. \n",
        "tags": [
          "User Data"
        ],
        "operationId": "getLedgersInfo",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "Get Ledger Info Request Body",
                "required": [
                  "nonce"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "id": {
                    "description": "Comma delimited list of ledger IDs to query info about (20 maximum)",
                    "type": "string"
                  },
                  "trades": {
                    "description": "Whether or not to include trades related to position in output",
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ledgers info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": {
                      "L4UESK-KG3EQ-UFO4T5": {
                        "refid": "TJKLXF-PGMUI-4NTLXU",
                        "time": 1610464484.1787,
                        "type": "trade",
                        "subtype": "",
                        "aclass": "currency",
                        "asset": "ZGBP",
                        "amount": "-24.5000",
                        "fee": "0.0490",
                        "balance": "459567.9171"
                      }
                    }
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "additionalProperties": {
                        "x-additionalPropertiesName": "ledger_id",
                        "title": "LedgerEntry",
                        "description": "Ledger Entry",
                        "type": "object",
                        "properties": {
                          "refid": {
                            "description": "Reference Id",
                            "type": "string"
                          },
                          "time": {
                            "description": "Unix timestamp of ledger",
                            "type": "number"
                          },
                          "type": {
                            "description": "Type of ledger entry",
                            "type": "string",
                            "enum": [
                              "trade",
                              "deposit",
                              "withdraw",
                              "transfer",
                              "margin",
                              "rollover",
                              "spend",
                              "receive",
                              "settled",
                              "adjustment"
                            ]
                          },
                          "subtype": {
                            "description": "Additional info relating to the ledger entry type, where applicable",
                            "type": "string"
                          },
                          "aclass": {
                            "description": "Asset class",
                            "type": "string"
                          },
                          "asset": {
                            "description": "Asset",
                            "type": "string"
                          },
                          "amount": {
                            "description": "Transaction amount",
                            "type": "string"
                          },
                          "fee": {
                            "description": "Transaction fee",
                            "type": "string"
                          },
                          "balance": {
                            "description": "Resulting balance",
                            "type": "string"
                          }
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/QueryLedgers\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>&id=LGBRJU-SQZ4L-5HLS3C,L3S26P-BHIOV-TTWYYI\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/QueryLedgers', {\n    \"nonce\": str(int(1000*time.time())),\n    \"id\": \"L4UESK-KG3EQ-UFO4T5\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/TradeVolume": {
      "post": {
        "summary": "Get Trade Volume",
        "description": "Note: If an asset pair is on a maker/taker fee schedule, the taker side is given in `fees` and maker side in `fees_maker`. For pairs not on maker/taker, they will only be given in `fees`.\n",
        "tags": [
          "User Data"
        ],
        "operationId": "getTradeVolume",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "Get Trade Volume",
                "required": [
                  "nonce"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "pair": {
                    "description": "Comma delimited list of asset pairs to get fee info on (optional)",
                    "type": "string"
                  },
                  "fee-info": {
                    "description": "Whether or not to include fee info in results (optional)",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/paths/~1public~1OHLC/get/parameters/0"
          }
        ],
        "responses": {
          "200": {
            "description": "Trade Volume retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": {
                      "currency": "ZUSD",
                      "volume": "200709587.4223",
                      "fees": {
                        "XXBTZUSD": {
                          "fee": "0.1000",
                          "minfee": "0.1000",
                          "maxfee": "0.2600",
                          "nextfee": null,
                          "nextvolume": null,
                          "tiervolume": "10000000.0000"
                        }
                      },
                      "fees_maker": {
                        "XXBTZUSD": {
                          "fee": "0.0000",
                          "minfee": "0.0000",
                          "maxfee": "0.1600",
                          "nextfee": null,
                          "nextvolume": null,
                          "tiervolume": "10000000.0000"
                        }
                      }
                    }
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "title": "TradeVolume",
                      "description": "Trade Volume",
                      "type": "object",
                      "properties": {
                        "currency": {
                          "description": "Volume currency",
                          "type": "string"
                        },
                        "volume": {
                          "description": "Current discount volume",
                          "type": "string"
                        },
                        "fees": {
                          "type": "object",
                          "additionalProperties": {
                            "x-additionalPropertiesName": "pair",
                            "title": "FeeTierInfo",
                            "description": "Fee Tier Info",
                            "type": "object",
                            "properties": {
                              "fee": {
                                "description": "Current fee (in percent)",
                                "type": "string"
                              },
                              "min_fee": {
                                "description": "minimum fee for pair (if not fixed fee)",
                                "type": "string"
                              },
                              "max_fee": {
                                "description": "maximum fee for pair (if not fixed fee)",
                                "type": "string"
                              },
                              "next_fee": {
                                "description": "next tier's fee for pair (if not fixed fee,  null if at lowest fee tier)",
                                "type": "string",
                                "nullable": true
                              },
                              "tier_volume": {
                                "description": "volume level of current tier (if not fixed fee. null if at lowest fee tier)",
                                "type": "string",
                                "nullable": true
                              },
                              "next_volume": {
                                "description": "volume level of next tier (if not fixed fee. null if at lowest fee tier)",
                                "type": "string",
                                "nullable": true
                              }
                            }
                          }
                        },
                        "fees_maker": {
                          "type": "object",
                          "additionalProperties": {
                            "x-additionalPropertiesName": "pair",
                            "$ref": "#/paths/~1private~1TradeVolume/post/responses/200/content/application~1json/schema/properties/result/properties/fees/additionalProperties"
                          }
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"http://api.kraken.com/0/private/TradeVolume\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>&pair=XETCXETH\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/TradeVolume', {\n    \"nonce\": str(int(1000*time.time())),\n    \"fee-info\": True,\n    \"pair\": \"XBTUSD\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/AddExport": {
      "post": {
        "summary": "Request Export Report",
        "description": "Request export of trades or ledgers.",
        "tags": [
          "User Data"
        ],
        "operationId": "addExport",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "report",
                  "description"
                ],
                "properties": {
                  "nonce": {
                    "description": "Nonce used in construction of `API-Sign` header",
                    "type": "integer",
                    "format": "int32"
                  },
                  "report": {
                    "type": "string",
                    "description": "Type of data to export",
                    "enum": [
                      "trades",
                      "ledgers"
                    ]
                  },
                  "format": {
                    "type": "string",
                    "description": "File format to export",
                    "enum": [
                      "CSV",
                      "TSV"
                    ],
                    "default": "CSV"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description for the export"
                  },
                  "fields": {
                    "type": "string",
                    "default": "all",
                    "description": "Comma-delimited list of fields to include\n\n* `trades`: ordertxid, time, ordertype, price, cost, fee, vol, margin, misc, ledgers\n* `ledgers`: refid, time, type, aclass, asset, amount, fee, balance\n"
                  },
                  "starttm": {
                    "type": "integer",
                    "description": "UNIX timestamp for report start time (default 1 year ago)"
                  },
                  "endtm": {
                    "type": "integer",
                    "description": "UNIX timestamp for report end time (default now)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Export request made",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Report ID"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "id": "TCJA"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/AddExport', {\n    \"nonce\": str(int(1000*time.time())),\n    \"description\":\"my_trades_1\",\n    \"format\":\"CSV\",\n    \"report\":\"trades\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/ExportStatus": {
      "post": {
        "summary": "Get Export Report Status",
        "description": "Get status of requested data exports.",
        "tags": [
          "User Data"
        ],
        "operationId": "exportStatus",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "report"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "report": {
                    "type": "string",
                    "description": "Type of reports to inquire about",
                    "enum": [
                      "trades",
                      "ledgers"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Export status retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Report ID"
                          },
                          "descr": {
                            "type": "string"
                          },
                          "format": {
                            "type": "string"
                          },
                          "report": {
                            "type": "string"
                          },
                          "subtype": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string",
                            "description": "Status of the report",
                            "enum": [
                              "Queued",
                              "Processing",
                              "Processed"
                            ]
                          },
                          "flags": {
                            "type": "string",
                            "deprecated": true
                          },
                          "fields": {
                            "type": "string"
                          },
                          "createdtm": {
                            "type": "string",
                            "description": "UNIX timestamp of report request"
                          },
                          "expiretm": {
                            "type": "string",
                            "deprecated": true
                          },
                          "starttm": {
                            "type": "string",
                            "description": "UNIX timestamp report processing began"
                          },
                          "completedtm": {
                            "type": "string",
                            "description": "UNIX timestamp report processing finished"
                          },
                          "datastarttm": {
                            "type": "string",
                            "description": "UNIX timestamp of the report data start time"
                          },
                          "dataendtm": {
                            "type": "string",
                            "description": "UNIX timestamp of the report data end time"
                          },
                          "aclass": {
                            "type": "string",
                            "deprecated": true
                          },
                          "asset": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": [
                    {
                      "id": "VSKC",
                      "descr": "my_trades_1",
                      "format": "CSV",
                      "report": "trades",
                      "subtype": "all",
                      "status": "Processed",
                      "flags": "0",
                      "fields": "all",
                      "createdtm": "1616669085",
                      "expiretm": "1617878685",
                      "starttm": "1616669093",
                      "completedtm": "1616669093",
                      "datastarttm": "1614556800",
                      "dataendtm": "1616669085",
                      "aclass": "forex",
                      "asset": "all"
                    },
                    {
                      "id": "TCJA",
                      "descr": "my_trades_1",
                      "format": "CSV",
                      "report": "trades",
                      "subtype": "all",
                      "status": "Processed",
                      "flags": "0",
                      "fields": "all",
                      "createdtm": "1617363637",
                      "expiretm": "1618573237",
                      "starttm": "1617363664",
                      "completedtm": "1617363664",
                      "datastarttm": "1617235200",
                      "dataendtm": "1617363637",
                      "aclass": "forex",
                      "asset": "all"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/ExportStatus', {\n    \"nonce\": str(int(1000*time.time())),\n    \"report\":\"trades\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/RetrieveExport": {
      "post": {
        "summary": "Retrieve Data Export",
        "description": "Retrieve a processed data export",
        "tags": [
          "User Data"
        ],
        "operationId": "retrieveExport",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "id"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "id": {
                    "type": "string",
                    "description": "Report ID to retrieve"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data export report retrieved",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "properties": {
                    "report": {
                      "type": "string",
                      "format": "binary",
                      "description": "Binary zip archive containing the report"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/RetrieveExport', {\n    \"nonce\": str(int(1000*time.time())),\n    \"id\":\"TCJA\"\n}, api_key, api_sec)\n\n# Write export to a new file 'myexport.zip'\ntarget_path = 'myexport.zip'\nhandle = open(target_path, \"wb\")\nfor chunk in resp.iter_content(chunk_size=512):\n    if chunk:  # filter out keep-alive new chunks\n        handle.write(chunk)\nhandle.close()\n"
          }
        ]
      }
    },
    "/private/RemoveExport": {
      "post": {
        "summary": "Delete Export Report",
        "description": "Delete exported trades/ledgers report",
        "tags": [
          "User Data"
        ],
        "operationId": "removeExport",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "id",
                  "type"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "id": {
                    "type": "string",
                    "description": "ID of report to delete or cancel"
                  },
                  "type": {
                    "type": "string",
                    "description": "`delete` can only be used for reports that have already been processed. Use `cancel` for queued or processing reports.\n",
                    "enum": [
                      "cancel",
                      "delete"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Export report deleted or cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "delete": {
                          "type": "boolean",
                          "description": "Whether deletion was successful"
                        },
                        "cancel": {
                          "type": "boolean",
                          "description": "Whether cancellation was successful"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  },
                  "example": {
                    "error": [],
                    "result": {
                      "delete": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/RemoveExport', {\n    \"nonce\": str(int(1000*time.time())),\n    \"id\":\"TCJA\",\n    \"type\":\"delete\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/AddOrder": {
      "post": {
        "summary": "Add Order",
        "description": "Place a new order.\n\n**Note**: See the [AssetPairs](#operation/getTradableAssetPairs) endpoint for details on the available trading pairs, their price and quantity precisions, order minimums, available leverage, etc.\n",
        "tags": [
          "User Trading"
        ],
        "operationId": "addOrder",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "Add Standard Order Request Body",
                "required": [
                  "nonce",
                  "pair",
                  "type",
                  "ordertype"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "userref": {
                    "description": "User reference id\n\n`userref` is an optional user-specified integer id that can be associated with any number of orders. Many clients choose a `userref` corresponding to a unique integer id generated by their systems (e.g. a timestamp). However, because we don't enforce uniqueness on our side, it can also be used to easily group orders by pair, side, strategy, etc. This allows clients to more readily cancel or query information about orders in a particular group, with fewer API calls by using `userref` instead of our `txid`, where supported.\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "ordertype": {
                    "description": "Order type\n",
                    "type": "string",
                    "enum": [
                      "market",
                      "limit",
                      "stop-loss",
                      "take-profit",
                      "stop-loss-limit",
                      "take-profit-limit",
                      "settle-position"
                    ]
                  },
                  "type": {
                    "description": "Order direction (buy/sell)",
                    "type": "string",
                    "enum": [
                      "buy",
                      "sell"
                    ]
                  },
                  "volume": {
                    "description": "Order quantity in terms of the base asset\n> Note: Volume can be specified as `0` for closing margin orders to automatically fill the requisite quantity.\n",
                    "type": "string"
                  },
                  "pair": {
                    "description": "Asset pair `id` or `altname`",
                    "type": "string"
                  },
                  "price": {
                    "description": "Price\n\n* Limit price for `limit` orders\n* Trigger price for `stop-loss`, `stop-loss-limit`, `take-profit` and `take-profit-limit` orders\n",
                    "type": "string"
                  },
                  "price2": {
                    "description": "Secondary Price\n\n* Limit price for `stop-loss-limit` and `take-profit-limit` orders\n\n>  Note: Either `price` or `price2` can be preceded by `+`, `-`, or `#` to specify the order price as an offset relative to the last traded price. `+` adds the amount to, and `-` subtracts the amount from the last traded price. `#` will either add or subtract the amount to the last traded price, depending on the direction and order type used. Relative prices can be suffixed with a `%` to signify the relative amount as a percentage.\n",
                    "type": "string"
                  },
                  "leverage": {
                    "description": "Amount of leverage desired (default = none)\n",
                    "type": "string"
                  },
                  "oflags": {
                    "description": "Comma delimited list of order flags\n\n  * `post` post-only order (available when ordertype = limit)\n  * `fcib` prefer fee in base currency (default if selling)\n  * `fciq` prefer fee in quote currency (default if buying, mutually exclusive with `fcib`)\n  * `nompp` disable [market price protection](https://support.kraken.com/hc/en-us/articles/201648183-Market-Price-Protection) for market orders\n",
                    "type": "string"
                  },
                  "starttm": {
                    "description": "Scheduled start time. Can be specified as an absolute timestamp or as a number of seconds in the future.\n  * `0` now (default)\n  * `+<n>` schedule start time <n> seconds from now\n  * `<n>` = unix timestamp of start time\n",
                    "type": "string"
                  },
                  "expiretm": {
                    "description": "Expiration time\n  * `0` no expiration (default)\n  * `+<n>` = expire <n> seconds from now, minimum 5 seconds\n  * `<n>` = unix timestamp of expiration time\n",
                    "type": "string"
                  },
                  "close[ordertype]": {
                    "description": "Conditional close order type. \n> Note: [Conditional close orders](https://support.kraken.com/hc/en-us/articles/360038640052-Conditional-Close) are triggered by execution of the primary order in the same quantity and opposite direction, but once triggered are __independent orders__ that may reduce or increase net position.  \n",
                    "type": "string",
                    "enum": [
                      "limit",
                      "stop-loss",
                      "take-profit",
                      "stop-loss-limit",
                      "take-profit-limit"
                    ]
                  },
                  "close[price]": {
                    "description": "Conditional close order `price`\n",
                    "type": "string"
                  },
                  "close[price2]": {
                    "description": "Conditional close order `price2`\n",
                    "type": "string"
                  },
                  "trading_agreement": {
                    "type": "string",
                    "enum": [
                      "agree"
                    ],
                    "description": "[Agreement required](https://support.kraken.com/hc/en-us/articles/360000920026--Trading-agreement-required-error-for-German-residents) for residents of Germany\n"
                  },
                  "validate": {
                    "type": "boolean",
                    "description": "Validate inputs only. Do not submit order.",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "title": "OrderAdded",
                      "type": "object",
                      "properties": {
                        "descr": {
                          "description": "Order description info",
                          "type": "object",
                          "properties": {
                            "order": {
                              "description": "Order description",
                              "type": "string"
                            },
                            "close": {
                              "description": "Conditional close order description, if applicable",
                              "type": "string"
                            }
                          }
                        },
                        "txid": {
                          "description": "Transaction IDs for order\n<br><sup><sub>(if order was added successfully)</sup></sub>\n",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                      }
                    }
                  }
                },
                "examples": {
                  "cURL (Limit with conditional stop-loss)": {
                    "value": {
                      "error": [],
                      "result": {
                        "descr": {
                          "order": "buy 2.12340000 XBTUSD @ limit 45000.1 with 2:1 leverage",
                          "close": "close position @ stop loss 38000.0 -> limit 36000.0"
                        },
                        "txid": [
                          "OUF4EM-FRGI2-MQMWZD"
                        ]
                      }
                    }
                  },
                  "Python (Limit)": {
                    "value": {
                      "error": [],
                      "result": {
                        "descr": {
                          "order": "buy 1.25000000 XBTUSD @ limit 27500.0"
                        },
                        "txid": [
                          "OU22CG-KLAF2-FWUDD7"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "// buy 2.1234 XBTUSD @ limit $45,000.1\n// with 2:1 leverage, with a follow up stop loss\n\ncurl -X \"POST\" \"https://api.kraken.com/0/private/AddOrder\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\"\n     --data-urlencode \"pair=XXBTZUSD\" \\\n     --data-urlencode \"type=buy\" \\\n     --data-urlencode \"ordertype=limit\" \\\n     --data-urlencode \"price=45000.1\" \\\n     --data-urlencode \"volume=2.1234\" \\\n     --data-urlencode \"leverage=2:1\" \\\n     --data-urlencode \"close[ordertype]=stop-loss-limit\" \\\n     --data-urlencode \"close[price]=38000\" \\\n     --data-urlencode \"close[price2]=36000\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/AddOrder', {\n    \"nonce\": str(int(1000*time.time())),\n    \"ordertype\": \"limit\",\n    \"type\": \"buy\",\n    \"volume\": 1.25,\n    \"pair\": \"XBTUSD\",\n    \"price\": 27500\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/CancelOrder": {
      "post": {
        "summary": "Cancel Order",
        "description": "Cancel a particular open order (or set of open orders) by `txid` or `userref`\n",
        "tags": [
          "User Trading"
        ],
        "operationId": "cancelOrder",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "Cancel Open Order Request Body",
                "required": [
                  "nonce",
                  "txid"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "txid": {
                    "description": "Open order transaction ID (txid) or user reference (userref)",
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Open order cancelled.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": {
                      "count": 1
                    }
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "title": "OrderCancelled",
                      "type": "object",
                      "properties": {
                        "count": {
                          "description": "Number of orders cancelled.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "pending": {
                          "description": "if set, order(s) is/are pending cancellation",
                          "type": "boolean"
                        }
                      }
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/CancelOrder\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\"\n     --data-urlencode \"txid=OYVGEW-VYV5B-UUEXSK\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/CancelOrder', {\n    \"nonce\": str(int(1000*time.time())),\n    \"txid\": \"OG5V2Y-RYKVL-DT3V3B\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/CancelAll": {
      "post": {
        "summary": "Cancel All Orders",
        "description": "Cancel all open orders\n",
        "tags": [
          "User Trading"
        ],
        "operationId": "cancelAllOrders",
        "requestBody": {
          "$ref": "#/paths/~1private~1Balance/post/requestBody"
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"http://api.kraken.com/0/private/CancelAll\" \\\n    -H 'API-Key: <YOUR-API-KEY>' \\\n    -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n    -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n    --data-urlencode \"nonce=<YOUR-NONCE>\"  \n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\nresp = kraken_request('/0/private/CancelAll', {\n    \"nonce\": str(int(1000*time.time()))\n}, api_key, api_sec)\n\nprint(resp.json())      \n"
          }
        ],
        "responses": {
          "200": {
            "description": "Open orders cancelled.",
            "content": {
              "application/json": {
                "example": {
                  "error": [],
                  "result": {
                    "count": 4
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "description": "Number of orders that were cancelled",
                          "type": "integer"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/private/CancelAllOrdersAfter": {
      "post": {
        "summary": "Cancel All Orders After X",
        "tags": [
          "User Trading"
        ],
        "operationId": "cancelAllOrdersAfter",
        "description": "CancelAllOrdersAfter provides a \"Dead Man's Switch\" mechanism to protect the client from network malfunction, extreme latency or unexpected matching engine downtime. The client can send a request with a timeout (in seconds), that will start a countdown timer which will cancel *all* client orders when the timer expires. The client has to keep sending new requests to push back the trigger time, or deactivate the mechanism by specifying a timeout of 0. If the timer expires, all orders are cancelled and then the timer remains disabled until the client provides a new (non-zero) timeout.\n\nThe recommended use is to make a call every 15 to 30 seconds, providing a timeout of 60 seconds. This allows the client to keep the orders in place in case of a brief disconnection or transient delay, while keeping them safe in case of a network breakdown. It is also recommended to disable the timer ahead of regularly scheduled trading engine maintenance (if the timer is enabled, all orders will be cancelled when the trading engine comes back from downtime - planned or otherwise).\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "timeout"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "timeout": {
                    "type": "integer",
                    "description": "Duration (in seconds) to set/extend the timer by"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Dead man's switch timer reset or disabled.",
            "content": {
              "application/json": {
                "example": {
                  "error": [],
                  "result": {
                    "currentTime": "2021-03-24T17:41:56Z",
                    "triggerTime": "2021-03-24T17:42:56Z"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "currentTime": {
                          "description": "Timestamp (RFC3339 format) at which the request was received",
                          "type": "string"
                        },
                        "triggerTime": {
                          "description": "Timestamp (RFC3339 format) after which all orders will be cancelled, unless the timer is extended or disabled",
                          "type": "string"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"http://api.kraken.com/0/private/CancelAllOrdersAfter\" \\\n    -H 'API-Key: <YOUR-API-KEY>' \\\n    -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n    -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n    --data-urlencode \"nonce=<YOUR-NONCE>\" \\\n    --data-urlencode \"timeout=60\" \n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/CancelAllOrdersAfter', {\n    \"nonce\": str(int(1000*time.time())),\n    \"timeout\": 60\n}, api_key, api_sec)\n\nprint(resp.json())       \n"
          }
        ]
      }
    },
    "/private/DepositMethods": {
      "post": {
        "summary": "Get Deposit Methods",
        "description": "Retrieve methods available for depositing a particular asset.      \n",
        "tags": [
          "User Funding"
        ],
        "operationId": "getDepositMethods",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "Get Desposit Methods Request Body",
                "required": [
                  "nonce",
                  "asset"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "asset": {
                    "description": "Asset being deposited",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deposit methods retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": [
                      {
                        "method": "Bitcoin",
                        "limit": false,
                        "fee": "0.0000000000",
                        "gen-address": true
                      }
                    ]
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "title": "depositMethod",
                        "description": "Deposit Method",
                        "type": "object",
                        "properties": {
                          "method": {
                            "description": "Name of deposit method",
                            "type": "string"
                          },
                          "limit": {
                            "description": "Maximum net amount that can be deposited right now, or false if no limit"
                          },
                          "fee": {
                            "description": "Amount of fees that will be paid",
                            "type": "string"
                          },
                          "address-setup-fee": {
                            "description": "Whether or not method has an address setup fee",
                            "type": "string"
                          },
                          "gen-address": {
                            "type": "boolean",
                            "description": "Whether new addresses can be generated for this method."
                          }
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"http://api.kraken.com/0/private/DepositMethods\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\" \\\n     --data-urlencode \"asset=XBT\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/DepositMethods', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XBT\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/DepositAddresses": {
      "post": {
        "summary": "Get Deposit Addresses",
        "description": "Retrieve (or generate a new) deposit addresses for a particular asset and method.\n",
        "tags": [
          "User Funding"
        ],
        "operationId": "getDepositAddresses",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "asset",
                  "method"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "asset": {
                    "description": "Asset being deposited",
                    "type": "string"
                  },
                  "method": {
                    "description": "Name of the deposit method",
                    "type": "string"
                  },
                  "new": {
                    "description": "Whether or not to generate a new address",
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deposit addresses retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": [
                      {
                        "address": "2N9fRkx5JTWXWHmXzZtvhQsufvoYRMq9ExV",
                        "expiretm": "0",
                        "new": true
                      },
                      {
                        "address": "2NCpXUCEYr8ur9WXM1tAjZSem2w3aQeTcAo",
                        "expiretm": "0",
                        "new": true
                      },
                      {
                        "address": "2Myd4eaAW96ojk38A2uDK4FbioCayvkEgVq",
                        "expiretm": "0"
                      }
                    ]
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "title": "depositAddress",
                        "description": "Deposit Address",
                        "type": "object",
                        "properties": {
                          "address": {
                            "description": "Deposit Address",
                            "type": "string"
                          },
                          "expiretm": {
                            "description": "Expiration time in unix timestamp, or 0 if not expiring",
                            "type": "string"
                          },
                          "new": {
                            "description": "Whether or not address has ever been used",
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"http://api.kraken.com/0/private/DepositAddresses\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\" \\\n     --data-urlencode \"asset=XBT\" \\\n     --data-urlencode \"method=Bitcoin\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/DepositAddresses', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XBT\",\n    \"method\": \"Bitcoin\",\n    \"new\": True\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/DepositStatus": {
      "post": {
        "summary": "Get Status of Recent Deposits",
        "description": "Retrieve information about recent deposits made.      \n",
        "tags": [
          "User Funding"
        ],
        "operationId": "getStatusRecentDeposits",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "Get Status of Recent Deposits Request Body",
                "required": [
                  "nonce",
                  "asset"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "asset": {
                    "description": "Asset being deposited",
                    "type": "string"
                  },
                  "method": {
                    "description": "Name of the deposit method",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recent deposits retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "error": [],
                    "result": [
                      {
                        "method": "Bitcoin",
                        "aclass": "currency",
                        "asset": "XXBT",
                        "refid": "QGBCOYA-UNP53O-F2JDNS",
                        "txid": "6544b41b607d8b2512baf801755a3a87b6890eacdb451be8a94059fb11f0a8d9",
                        "info": "2Myd4eaAW96ojk38A2uDK4FbioCayvkEgVq",
                        "amount": "0.78125000",
                        "fee": "0.0000000000",
                        "time": 1546992722,
                        "status": "Success"
                      },
                      {
                        "method": "Bitcoin",
                        "aclass": "currency",
                        "asset": "XXBT",
                        "refid": "QGBHU3O-73ARA5-IFCFZT",
                        "txid": "fe12122222fe7fb1bc756a10ecd25f93015e959810ff1daf56535b9b01a803af",
                        "info": "2Myd4eaAW96ojk38A2uDK4FbioCayvkEgVq",
                        "amount": "0.78125000",
                        "time": 1546992722,
                        "status": "Settled"
                      }
                    ]
                  },
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "title": "Deposit",
                        "description": "Deposit",
                        "type": "object",
                        "properties": {
                          "method": {
                            "description": "Name of deposit method",
                            "type": "string"
                          },
                          "aclass": {
                            "description": "Asset class",
                            "type": "string"
                          },
                          "asset": {
                            "description": "Asset",
                            "type": "string"
                          },
                          "refid": {
                            "description": "Reference ID",
                            "type": "string"
                          },
                          "txid": {
                            "description": "Method transaction ID",
                            "type": "string"
                          },
                          "info": {
                            "description": "Method transaction information",
                            "type": "string"
                          },
                          "amount": {
                            "description": "Amount deposited",
                            "type": "string"
                          },
                          "fee": {
                            "description": "Fees paid"
                          },
                          "time": {
                            "description": "Unix timestamp when request was made",
                            "type": "integer",
                            "format": "int32"
                          },
                          "status": {
                            "description": "Status of deposit<br>\n<sup><sub>For information about the status, please refer to the [IFEX financial transaction states](https://github.com/globalcitizen/ifex-protocol/blob/master/draft-ifex-00.txt#L837).</sup></sub>\n"
                          },
                          "status-prop": {
                            "description": "Addition status properties <sup><sub>(if available)</sup></sub><br>\n  * `return` A return transaction initiated by Kraken\n  * `onhold` Deposit is on hold pending review\n",
                            "type": "string",
                            "enum": [
                              "return",
                              "onhold"
                            ]
                          }
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"http://api.kraken.com/0/private/DepositStatus\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\" \\\n     --data-urlencode \"asset=XBT\" \\\n     --data-urlencode \"method=Bitcoin\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/DepositStatus', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XBT\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/WithdrawInfo": {
      "post": {
        "summary": "Get Withdrawal Information",
        "description": "Retrieve fee information about potential withdrawals for a particular asset, key and amount.      \n",
        "tags": [
          "User Funding"
        ],
        "operationId": "getWithdrawalInformation",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "asset",
                  "key",
                  "amount"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "asset": {
                    "description": "Asset being withdrawn",
                    "type": "string"
                  },
                  "key": {
                    "description": "Withdrawal key name, as set up on your account",
                    "type": "string"
                  },
                  "amount": {
                    "description": "Amount to be withdrawn",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Withdrawal information retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "title": "withdrawalInfo",
                      "description": "Withdrawal Info",
                      "type": "object",
                      "properties": {
                        "method": {
                          "description": "Name of the withdrawal method that will be used",
                          "type": "string"
                        },
                        "limit": {
                          "description": "Maximum net amount that can be withdrawn right now",
                          "type": "string"
                        },
                        "amount": {
                          "description": "Net amount that will be sent, after fees",
                          "type": "string"
                        },
                        "fee": {
                          "description": "Amount of fees that will be paid",
                          "type": "string"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "method": "Bitcoin",
                    "limit": "332.00956139",
                    "amount": "0.72485000",
                    "fee": "0.00015000"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/WithdrawInfo', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XBT\",\n    \"key\": \"btc_testnet_with1\",\n    \"amount\": 0.725\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/Withdraw": {
      "post": {
        "summary": "Withdraw Funds",
        "description": "Make a withdrawal request.      \n",
        "tags": [
          "User Funding"
        ],
        "operationId": "withdrawFunds",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "asset",
                  "key",
                  "amount"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "asset": {
                    "description": "Asset being withdrawn",
                    "type": "string"
                  },
                  "key": {
                    "description": "Withdrawal key name, as set up on your account",
                    "type": "string"
                  },
                  "amount": {
                    "description": "Amount to be withdrawn",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Withdrawal created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "refid": {
                          "type": "string",
                          "description": "Reference ID"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "refid": "AGBSO6T-UFMTTQ-I7KGS6"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/Withdraw', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XBT\",\n    \"key\": \"btc_testnet_with1\",\n    \"amount\": 0.725\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/WithdrawStatus": {
      "post": {
        "summary": "Get Status of Recent Withdrawals",
        "description": "Retrieve information about recently requests withdrawals.      \n",
        "tags": [
          "User Funding"
        ],
        "operationId": "getStatusRecentWithdrawals",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "Get Status of Recent Withdrawals Request Body",
                "required": [
                  "nonce",
                  "asset"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "asset": {
                    "description": "Asset being withdrawn",
                    "type": "string"
                  },
                  "method": {
                    "description": "Name of the withdrawal method",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recent withdrawals retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "title": "Withdrawal",
                        "description": "Withdrawal",
                        "type": "object",
                        "properties": {
                          "method": {
                            "description": "Name of withdrawal method",
                            "type": "string"
                          },
                          "aclass": {
                            "description": "Asset class",
                            "type": "string"
                          },
                          "asset": {
                            "description": "Asset",
                            "type": "string"
                          },
                          "refid": {
                            "description": "Reference ID",
                            "type": "string"
                          },
                          "txid": {
                            "description": "Method transaction ID",
                            "type": "string"
                          },
                          "info": {
                            "description": "Method transaction information",
                            "type": "string"
                          },
                          "amount": {
                            "description": "Amount withdrawn",
                            "type": "string"
                          },
                          "fee": {
                            "description": "Fees paid"
                          },
                          "time": {
                            "description": "Unix timestamp when request was made",
                            "type": "integer",
                            "format": "int32"
                          },
                          "status": {
                            "description": "Status of withdraw<br>\n<sup><sub>For information about the status, please refer to the [IFEX financial transaction states](https://github.com/globalcitizen/ifex-protocol/blob/master/draft-ifex-00.txt#L837).</sup></sub>\n",
                            "type": "string",
                            "enum": [
                              "Initial",
                              "Pending",
                              "Settled",
                              "Success",
                              "Failure"
                            ]
                          },
                          "status-prop": {
                            "description": "Addition status properties <sup><sub>(if available)</sup></sub><br>\n  * `cancel-pending` cancelation requested\n  * `canceled` canceled\n  * `cancel-denied` cancelation requested but was denied\n  * `return` a return transaction initiated by Kraken; it cannot be canceled\n  * `onhold` withdrawal is on hold pending review\n",
                            "type": "string",
                            "enum": [
                              "cancel-pending",
                              "canceled",
                              "cancel-denied",
                              "return",
                              "onhold"
                            ]
                          }
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": [
                    {
                      "method": "Bitcoin",
                      "aclass": "currency",
                      "asset": "XXBT",
                      "refid": "AGBZNBO-5P2XSB-RFVF6J",
                      "txid": null,
                      "info": "mzp6yUVMRxfasyfwzTZjjy38dHqMX7Z3GR",
                      "amount": "0.72485000",
                      "fee": "0.00015000",
                      "time": 1617014586,
                      "status": "Pending"
                    },
                    {
                      "method": "Bitcoin",
                      "aclass": "currency",
                      "asset": "XXBT",
                      "refid": "AGBSO6T-UFMTTQ-I7KGS6",
                      "txid": null,
                      "info": "mzp6yUVMRxfasyfwzTZjjy38dHqMX7Z3GR",
                      "amount": "0.72485000",
                      "fee": "0.00015000",
                      "time": 1617015423,
                      "status": "Failure",
                      "status-prop": "canceled"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/WithdrawStatus', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XBT\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/WithdrawlCancel": {
      "post": {
        "summary": "Request Withdrawal Cancelation",
        "description": "Cancel a recently requested withdrawal, if it has not already been successfully processed.       \n",
        "tags": [
          "User Funding"
        ],
        "operationId": "cancelWithdrawal",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "title": "Request Withdrawal Cancelation Request Body",
                "required": [
                  "nonce",
                  "asset",
                  "refid"
                ],
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "asset": {
                    "description": "Asset being withdrawn",
                    "type": "string"
                  },
                  "refid": {
                    "description": "Withdrawal reference ID",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Withdrawal cancellation requested.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "description": "Whether cancellation was successful or not."
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": true
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/WithdrawCancel', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XBT\",\n    \"refid\": \"AGBSO6T-UFMTTQ-I7KGS6\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/WalletTransfer": {
      "post": {
        "summary": "Request Wallet Transfer",
        "description": "Transfer from Kraken spot wallet to Kraken Futures holding wallet. Note that a transfer in the other direction must be requested via the Kraken Futures [API endpoint](https://support.kraken.com/hc/en-us/articles/360028105972-Withdrawal-to-Spot-Wallet).",
        "tags": [
          "User Funding"
        ],
        "operationId": "walletTransfer",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "asset",
                  "from",
                  "to",
                  "amount"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/paths/~1private~1AddExport/post/requestBody/content/application~1x-www-form-urlencoded/schema/properties/nonce"
                  },
                  "asset": {
                    "type": "string",
                    "description": "Asset to transfer (asset ID or `altname`)",
                    "example": "XBT"
                  },
                  "from": {
                    "type": "string",
                    "description": "Source wallet",
                    "enum": [
                      "Spot Wallet"
                    ]
                  },
                  "to": {
                    "type": "string",
                    "description": "Destination wallet",
                    "enum": [
                      "Futures Wallet"
                    ]
                  },
                  "amount": {
                    "type": "string",
                    "description": "Amount to transfer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transfer created.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "refid": {
                          "type": "string",
                          "description": "Reference ID",
                          "example": "BOG5AE5-KSCNR4-VPNPEV"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/paths/~1public~1AssetPairs/get/responses/200/content/application~1json/schema/properties/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "refid": "BOG5AE5-KSCNR4-VPNPEV"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/WalletTransfer', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"ETH\",\n    \"amount\": 0.100,\n    \"from\":\"Spot Wallet\",\n    \"to\":\"Futures Wallet\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "API-Key": {
        "type": "apiKey",
        "description": "The \"API-Key\" header should contain your API key.",
        "name": "API-Key",
        "in": "header"
      },
      "API-Sign": {
        "type": "apiKey",
        "description": "Authenticated requests should be signed with the \"API-Sign\" header, using a signature generated with your private key, nonce, encoded payload, and URI path according to:\n```none\nHMAC-SHA512 of (URI path + SHA256(nonce + POST data)) and base64 decoded secret API key\n```\n\n### Example Signature\n\nThe following is a specific example of a signature generated with a particular private key, nonce, and payload corresponding to a new limit order (buy 1.25 XBTUSD at $37,500). If your code is generating a different signature (\"API-Sign\") for thie example, then there is likely an issue with your application of the above methodology. Code snippets for generating the signature in Python, Golang and Node.js follow below.\n\n| Field | Value |\n|-|-|\n| Private Key | kQH5HW/8p1uGOVjbgWA7FunAmGO8lsSUXNsu3eow76sz84Q18fWxnyRzBHCd3pd5nE9qa99HAZtuZuj6F1huXg== |\n| Nonce |  1616492376594 |\n| Encoded Payload | nonce=1616492376594&ordertype=limit&pair=XBTUSD&price=37500&type=buy&volume=1.25 | \n| URI Path |  /0/private/AddOrder | \n| __API-Sign__ | __4/dpxb3iT4tp/ZCVEwSnEsLxx0bqyhLpdfOpc6fn7OR8+UClSV5n9E6aSS8MPtnRfp32bAb0nmbRn6H8ndwLUQ==__ | \n\n### Code Examples\n\n#### Python\n```python\nimport urllib.parse\nimport hashlib\nimport hmac\nimport base64\n\ndef get_kraken_signature(urlpath, data, secret):\n\n    postdata = urllib.parse.urlencode(data)\n    encoded = (str(data['nonce']) + postdata).encode()\n    message = urlpath.encode() + hashlib.sha256(encoded).digest()\n\n    mac = hmac.new(base64.b64decode(secret), message, hashlib.sha512)\n    sigdigest = base64.b64encode(mac.digest())\n    return sigdigest.decode()\n\napi_sec = \"kQH5HW/8p1uGOVjbgWA7FunAmGO8lsSUXNsu3eow76sz84Q18fWxnyRzBHCd3pd5nE9qa99HAZtuZuj6F1huXg==\"\n\ndata = {\n    \"nonce\": \"1616492376594\", \n    \"ordertype\": \"limit\", \n    \"pair\": \"XBTUSD\",\n    \"price\": 37500, \n    \"type\": \"buy\",\n    \"volume\": 1.25\n}\n\nsignature = get_kraken_signature(\"/0/private/AddOrder\", data, api_sec)\nprint(\"API-Sign: {}\".format(signature))\n\n```\n#### Golang [link](https://play.golang.org/p/SqP2pajUH6K)\n```go\npackage main\n\nimport (\n  \"crypto/hmac\"\n  \"crypto/sha256\"\n  \"crypto/sha512\"\n  \"encoding/base64\"\n  \"net/url\"\n  \"fmt\"\n)\n\nfunc getKrakenSignature(url_path string, values url.Values, secret []byte) string {\n  \n  sha := sha256.New()\n  sha.Write([]byte(values.Get(\"nonce\") + values.Encode()))\n  shasum := sha.Sum(nil)\n\n  mac := hmac.New(sha512.New, secret)\n  mac.Write(append([]byte(url_path), shasum...))\n  macsum := mac.Sum(nil)\n  return base64.StdEncoding.EncodeToString(macsum)\n}\n\nfunc main() {\n\n  apiSecret := \"kQH5HW/8p1uGOVjbgWA7FunAmGO8lsSUXNsu3eow76sz84Q18fWxnyRzBHCd3pd5nE9qa99HAZtuZuj6F1huXg==\"\n\n  payload := url.Values{}\n  payload.Add(\"pair\",\"XBTUSD\")\n  payload.Add(\"type\",\"buy\")\n  payload.Add(\"ordertype\",\"limit\")\n  payload.Add(\"price\",\"37500\")\n  payload.Add(\"volume\",\"1.25\")\n  payload.Add(\"nonce\",\"1616492376594\")\n\n  b64DecodedSecret, _ := base64.StdEncoding.DecodeString(apiSecret)\n\n  signature := getKrakenSignature(\"/0/private/AddOrder\", payload, b64DecodedSecret)\n  fmt.Printf(\"API-Sign: \" + signature +\"\\n\")\n}\n```\n\n#### Node JS\n```js\nconst crypto = require('crypto');\nconst qs     = require('qs');\n\nconst getMessageSignature = (path, request, secret, nonce) => {\n    const message       = qs.stringify(request);\n    const secret_buffer = new Buffer(secret, 'base64');\n    const hash          = new crypto.createHash('sha256');\n    const hmac          = new crypto.createHmac('sha512', secret_buffer);\n    const hash_digest   = hash.update(nonce + message).digest('binary');\n    const hmac_digest   = hmac.update(path + hash_digest, 'binary').digest('base64');\n\n    return hmac_digest;\n};\n```\n",
        "name": "API-Sign",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "API-Key": [],
      "API-Sign": []
    }
  ],
  "tags": [
    {
      "name": "Market Data"
    },
    {
      "name": "User Data"
    },
    {
      "name": "User Trading"
    },
    {
      "name": "User Funding"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Public Endpoints",
      "tags": [
        "Market Data"
      ]
    },
    {
      "name": "Authenticated Endpoints",
      "tags": [
        "User Data",
        "User Trading",
        "User Funding",
        "Websockets Authentication"
      ]
    }
  ]
}